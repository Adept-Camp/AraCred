{"version":3,"sources":["../../src/helpers/aragonjs-wrapper.js"],"names":["subscribe","wrapper","onApps","onForwarders","onTransaction","onPermissions","apps","forwarders","transactions","permissions","subscriptions","connectedApp","resolveEnsDomain","domain","opts","err","message","initAragonJS","dao","ensRegistryAddress","provider","gasPrice","accounts","ipfsConf","noop","onDaoAddress","isDomain","test","daoAddress","registryAddress","Error","Aragon","defaultGasPriceFn","apm","ipfs","init","providedAccounts","cancel","Object","values","forEach","subscription","unsubscribe","getApps","pipe","length","toPromise","getTransactionPath","appAddress","method","params","app","find","proxyAddress","aclProxy","address","getACLTransactionPath"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;AAGA,MAAMA,SAAS,GAAG,CAChBC,OADgB,EAEhB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,YAAV;AAAwBC,EAAAA,aAAxB;AAAuCC,EAAAA;AAAvC,CAFgB,KAGb;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAAkDR,OAAxD;AAEA,QAAMS,aAAa,GAAG;AACpBJ,IAAAA,IAAI,EAAEA,IAAI,CAACN,SAAL,CAAeE,MAAf,CADc;AAEpBS,IAAAA,YAAY,EAAE,IAFM;AAGpBJ,IAAAA,UAAU,EAAEA,UAAU,CAACP,SAAX,CAAqBG,YAArB,CAHQ;AAIpBK,IAAAA,YAAY,EAAEA,YAAY,CAACR,SAAb,CAAuBI,aAAvB,CAJM;AAKpBK,IAAAA,WAAW,EAAEA,WAAW,CAACT,SAAZ,CAAsBK,aAAtB;AALO,GAAtB;AAQA,SAAOK,aAAP;AACD,CAfD;AAiBA;;;;;;;;;AAOO,eAAeE,gBAAf,CAAgCC,MAAhC,EAAwCC,IAAxC,EAA8C;AACnD,MAAI;AACF,WAAO,MAAM,yBAAWD,MAAX,EAAmBC,IAAnB,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,uBAApB,EAA6C;AAC3C,aAAO,EAAP;AACD;;AACD,UAAMD,GAAN;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;AAkBO,eAAeE,YAAf,CACLC,GADK,EAELC,kBAFK,EAGL;AACEC,EAAAA,QADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,QAAQ,GAAG,EAHb;AAIEC,EAAAA,QAAQ,GAAG,EAJb;AAKErB,EAAAA,MAAM,GAAGsB,UALX;AAMErB,EAAAA,YAAY,GAAGqB,UANjB;AAOEpB,EAAAA,aAAa,GAAGoB,UAPlB;AAQEC,EAAAA,YAAY,GAAGD,UARjB;AASEnB,EAAAA,aAAa,GAAGmB;AATlB,IAUI,EAbC,EAcL;AACA,QAAME,QAAQ,GAAGR,GAAG,IAAI,iBAAiBS,IAAjB,CAAsBT,GAAtB,CAAxB;;AAEA,QAAMU,UAAU,GAAGF,QAAQ,CAACR,GAAD,CAAR,GACf,MAAMN,gBAAgB,CAACM,GAAD,EAAM;AAC1BE,IAAAA,QAD0B;AAE1BS,IAAAA,eAAe,EAAEV;AAFS,GAAN,CADP,GAKfD,GALJ;;AAOA,MAAI,CAACU,UAAL,EAAiB;AACf,UAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAEDL,EAAAA,YAAY,CAACG,UAAD,CAAZ,CAdA,CAgBA;;AACA,QAAM3B,OAAO,GAAG,IAAI8B,gBAAJ,CAAWH,UAAX,EAAuB;AACrCR,IAAAA,QADqC;AAErCY,IAAAA,iBAAiB,EAAE,MAAMX,QAFY;AAGrCY,IAAAA,GAAG,EAAE;AACHC,MAAAA,IAAI,EAAEX,QADH;AAEHJ,MAAAA;AAFG;AAHgC,GAAvB,CAAhB;;AASA,MAAI;AACF,UAAMlB,OAAO,CAACkC,IAAR,CAAa;AAAEb,MAAAA,QAAQ,EAAE;AAAEc,QAAAA,gBAAgB,EAAEd;AAApB;AAAZ,KAAb,CAAN;AACD,GAFD,CAEE,OAAOP,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,qBAApB,EAA2C;AACzC,YAAM,IAAIc,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,UAAMf,GAAN;AACD;;AAED,QAAML,aAAa,GAAGV,SAAS,CAC7BC,OAD6B,EAE7B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,aAAxB;AAAuCC,IAAAA;AAAvC,GAF6B,EAG7B;AAAEkB,IAAAA;AAAF,GAH6B,CAA/B;;AAMAtB,EAAAA,OAAO,CAACoC,MAAR,GAAiB,MAAM;AACrBC,IAAAA,MAAM,CAACC,MAAP,CAAc7B,aAAd,EAA6B8B,OAA7B,CAAqCC,YAAY,IAAI;AACnD,UAAIA,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACC,WAAb;AACD;AACF,KAJD;AAKD,GAND;;AAQA,SAAOzC,OAAP;AACD;AAED;;;;;;;AAKO,eAAe0C,OAAf,CAAuB1C,OAAvB,EAAgC;AACrC,SACEA,OAAO,CAACK,IAAR,CACE;AADF,GAEGsC,IAFH,CAEQ,0BAAUtC,IAAI,IAAIA,IAAI,CAACuC,MAAL,IAAe,CAAjC,EAAoC,IAApC,CAFR,EAGGC,SAHH,EADF;AAMD;AAED;;;;;;;;;;;;;;AAYO,eAAeC,kBAAf,CAAkCC,UAAlC,EAA8CC,MAA9C,EAAsDC,MAAtD,EAA8DjD,OAA9D,EAAuE;AAC5E;AACA,QAAMkD,GAAG,GAAG,MAAMlD,OAAO,CAACK,IAAR,CACfsC,IADe,EAEd;AACA,4BAAUtC,IAAI,IAAIA,IAAI,CAACuC,MAAL,IAAe,CAAjC,EAAoC,IAApC,CAHc,EAId,oBAAIvC,IAAI,IACNA,IAAI,CAAC8C,IAAL,CAAUD,GAAG,IAAI,0BAAeH,UAAf,EAA2BG,GAAG,CAACE,YAA/B,CAAjB,CADF,CAJc,EAOd,uBAAOF,GAAG,IAAIA,GAAd,CAPc,EAQd,+BAAe,IAAf,CARc,EAQQ;AACtB,yBATc,EAWfL,SAXe,EAAlB;AAaA,MAAI,CAACK,GAAL,EAAU,MAAM,IAAIrB,KAAJ,CAAW,kBAAiBkB,UAAW,GAAvC,CAAN,CAfkE,CAiB5E;;AACA,SAAOA,UAAU,KAAK/C,OAAO,CAACqD,QAAR,CAAiBC,OAAhC,GACHtD,OAAO,CAACuD,qBAAR,CAA8BP,MAA9B,EAAsCC,MAAtC,CADG,GAEHjD,OAAO,CAAC8C,kBAAR,CAA2BC,UAA3B,EAAuCC,MAAvC,EAA+CC,MAA/C,CAFJ;AAGD","sourcesContent":["import Aragon, { ensResolve } from '@aragon/wrapper'\nimport { takeWhile, map, filter, first, defaultIfEmpty } from 'rxjs/operators'\n//\nimport { addressesEqual } from '../util'\nimport { noop } from '../node'\n\n// Subscribe to wrapper's observables\nconst subscribe = (\n  wrapper,\n  { onApps, onForwarders, onTransaction, onPermissions }\n) => {\n  const { apps, forwarders, transactions, permissions } = wrapper\n\n  const subscriptions = {\n    apps: apps.subscribe(onApps),\n    connectedApp: null,\n    forwarders: forwarders.subscribe(onForwarders),\n    transactions: transactions.subscribe(onTransaction),\n    permissions: permissions.subscribe(onPermissions),\n  }\n\n  return subscriptions\n}\n\n/**\n * Resolve an ens domain\n *\n * @param {string} domain Domain\n * @param {*} opts Options\n * @returns {Promise<string>} Resolved ens domain\n */\nexport async function resolveEnsDomain(domain, opts) {\n  try {\n    return await ensResolve(domain, opts)\n  } catch (err) {\n    if (err.message === 'ENS name not defined.') {\n      return ''\n    }\n    throw err\n  }\n}\n\n/**\n * Initialize the Aragon.js wrapper and subscribe to the `apps`,\n * `forwarders`, `transactions` and `permissions` observables.\n *\n * @param {string} dao DAO address\n * @param {string} ensRegistryAddress ENS Registry address\n * @param {Object} options Options\n * @param {Object} options.provider Eth provider\n * @param {string} options.gasPrice Gas price\n * @param {string} options.accounts Eth accounts\n * @param {Object} options.ipfsConf IPFS configuration\n * @param {function} options.onApps Apps callback\n * @param {function} options.onForwarders Forwarders callback\n * @param {function} options.onTransaction Transaction callback\n * @param {function} options.onDaoAddress Dao address callback\n * @param {function} options.onPermissions Permissions callback\n * @returns {Promise<Aragon>} Aragon wrapper with an added `cancel` function\n */\nexport async function initAragonJS(\n  dao,\n  ensRegistryAddress,\n  {\n    provider,\n    gasPrice,\n    accounts = '',\n    ipfsConf = {},\n    onApps = noop,\n    onForwarders = noop,\n    onTransaction = noop,\n    onDaoAddress = noop,\n    onPermissions = noop,\n  } = {}\n) {\n  const isDomain = dao => /[a-z0-9]+\\.eth/.test(dao)\n\n  const daoAddress = isDomain(dao)\n    ? await resolveEnsDomain(dao, {\n        provider,\n        registryAddress: ensRegistryAddress,\n      })\n    : dao\n\n  if (!daoAddress) {\n    throw new Error('The provided DAO address is invalid')\n  }\n\n  onDaoAddress(daoAddress)\n\n  // TODO: don't reinitialize if cached\n  const wrapper = new Aragon(daoAddress, {\n    provider,\n    defaultGasPriceFn: () => gasPrice,\n    apm: {\n      ipfs: ipfsConf,\n      ensRegistryAddress,\n    },\n  })\n\n  try {\n    await wrapper.init({ accounts: { providedAccounts: accounts } })\n  } catch (err) {\n    if (err.message === 'connection not open') {\n      throw new Error('The wrapper cannot be initialized without a connection')\n    }\n    throw err\n  }\n\n  const subscriptions = subscribe(\n    wrapper,\n    { onApps, onForwarders, onTransaction, onPermissions },\n    { ipfsConf }\n  )\n\n  wrapper.cancel = () => {\n    Object.values(subscriptions).forEach(subscription => {\n      if (subscription) {\n        subscription.unsubscribe()\n      }\n    })\n  }\n\n  return wrapper\n}\n\n/**\n * Return a list of all installed apps.\n * @param {Aragon} wrapper Aragon wrapper\n * @returns {Promise<Object[]>} Installed apps\n */\nexport async function getApps(wrapper) {\n  return (\n    wrapper.apps\n      // If the app list contains a single app, wait for more\n      .pipe(takeWhile(apps => apps.length <= 1, true))\n      .toPromise()\n  )\n}\n\n/**\n * Get transaction path on an Aragon app for `method` with `params`\n * as parameters. Wait for apps to load before calling\n * wrapper's `getTransactionPath`. If app is the ACL, call\n * `getACLTransactionPath`.\n *\n * @param {string} appAddress App address\n * @param {string} method Method name\n * @param {Array<*>} params Method params\n * @param {Aragon} wrapper Aragon wrapper\n * @returns {Promise<Object>} Transaction path\n */\nexport async function getTransactionPath(appAddress, method, params, wrapper) {\n  // Wait for app info to load\n  const app = await wrapper.apps\n    .pipe(\n      // If the app list contains a single app, wait for more\n      takeWhile(apps => apps.length <= 1, true),\n      map(apps =>\n        apps.find(app => addressesEqual(appAddress, app.proxyAddress))\n      ),\n      filter(app => app),\n      defaultIfEmpty(null), // If app is not found, default to null\n      first()\n    )\n    .toPromise()\n\n  if (!app) throw new Error(`Can't find app ${appAddress}.`)\n\n  // If app is the ACL, call getACLTransactionPath\n  return appAddress === wrapper.aclProxy.address\n    ? wrapper.getACLTransactionPath(method, params)\n    : wrapper.getTransactionPath(appAddress, method, params)\n}\n"],"file":"aragonjs-wrapper.js"}