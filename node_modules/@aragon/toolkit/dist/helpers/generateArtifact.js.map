{"version":3,"sources":["../../src/helpers/generateArtifact.js"],"names":["decorateEnvrionmentsWithAppId","environments","decoratedEnvrionment","key","value","Object","entries","appId","namehash","hash","appName","decorateFunctionsWithAbi","functions","abi","abiFunctions","filter","elem","type","map","f","find","functionAbi","sig","getRoles","roles","role","assign","bytes","id","generateApplicationArtifact","arapp","sourceCode","functionsWithAbi","arappRoles","console","log","flattenedCode","SOLIDITY_FILE"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AAcA,MAAMA,6BAA6B,GAAGC,YAAY,IAAI;AACpD,QAAMC,oBAAoB,GAAG,EAA7B;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,YAAf,CAA3B,EAAyD;AACvDC,IAAAA,oBAAoB,CAACC,GAAD,CAApB,GAA4B,EAC1B,GAAGC,KADuB;AAE1BG,MAAAA,KAAK,EAAEC,wBAASC,IAAT,CAAcL,KAAK,CAACM,OAApB;AAFmB,KAA5B;AAID;;AACD,SAAOR,oBAAP;AACD,CATD;AAWA;;;;;;;;AAMA,SAASS,wBAAT,CAAkCC,SAAlC,EAA6CC,GAA7C,EAAkD;AAChD,QAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,CAAWC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,UAAjC,CAArB;AACA,SAAOL,SAAS,CAACM,GAAV,CAAcC,CAAC,KAAK,EACzB,GAAGA,CADsB;AAEzBN,IAAAA,GAAG,EAAEC,YAAY,CAACM,IAAb,CACHC,WAAW,IACT,yCAAwBA,WAAxB,MAAyC,yCAAwBF,CAAC,CAACG,GAA1B,CAFxC;AAFoB,GAAL,CAAf,CAAP;AAOD;AAED;;;;;;AAIA,MAAMC,QAAQ,GAAGC,KAAK,IACpBA,KAAK,CAACN,GAAN,CAAUO,IAAI,IAAIpB,MAAM,CAACqB,MAAP,CAAcD,IAAd,EAAoB;AAAEE,EAAAA,KAAK,EAAE,0BAAUF,IAAI,CAACG,EAAf;AAAT,CAApB,CAAlB,CADF;AAGA;;;;;;;;;;AAQO,eAAeC,2BAAf,CAA2CC,KAA3C,EAAkDjB,GAAlD,EAAuDkB,UAAvD,EAAmE;AACxE;AACA,QAAM9B,YAAY,GAAGD,6BAA6B,CAAC8B,KAAK,CAAC7B,YAAP,CAAlD,CAFwE,CAIxE;AACA;;AACA,QAAM;AAAEW,IAAAA,SAAF;AAAaY,IAAAA;AAAb,MAAuB,MAAM,4CAAoBO,UAApB,CAAnC,CANwE,CAQxE;AACA;;AACA,QAAMC,gBAAgB,GAAGrB,wBAAwB,CAACC,SAAD,EAAYC,GAAZ,CAAjD;AAEA,QAAMoB,UAAU,GAAGV,QAAQ,CAACO,KAAK,CAACN,KAAP,CAA3B;;AAEA,MAAIS,UAAU,KAAKT,KAAnB,EAA0B;AACxBU,IAAAA,OAAO,CAACC,GAAR,CACE,mFADF;AAGD,GAlBuE,CAoBxE;;;AAEA,SAAO,EACL,GAAGL,KADE;AAELM,IAAAA,aAAa,EAAG,KAAIC,wBAAc,EAF7B;AAGLpC,IAAAA,YAHK;AAILuB,IAAAA,KAJK;AAKLZ,IAAAA,SAAS,EAAEoB,gBALN;AAMLnB,IAAAA;AANK,GAAP;AAQD","sourcesContent":["import namehash from 'eth-ens-namehash'\nimport { keccak256 } from 'web3-utils'\nimport { encodeFunctionSignature } from 'web3-eth-abi'\n//\nimport { SOLIDITY_FILE } from './constants'\nimport { extractContractInfo } from './solidity-extractor'\n\n/**\n * @typedef {Object} FunctionInfo\n * @property {string} sig \"functionName(address,unit)\"\n * @property {Object[]} roles\n * @property {string} notice Multiline notice text\n * @property {Object} [abi] Abi of the function\n */\n\n/**\n * @param {Object} environments\n * @return {Object}\n */\nconst decorateEnvrionmentsWithAppId = environments => {\n  const decoratedEnvrionment = {}\n  for (const [key, value] of Object.entries(environments)) {\n    decoratedEnvrionment[key] = {\n      ...value,\n      appId: namehash.hash(value.appName),\n    }\n  }\n  return decoratedEnvrionment\n}\n\n/**\n * Appends the abi of a function to the functions array\n * @param {FunctionInfo[]} functions functions\n * @param {Object[]} abi ABI\n * @return {FunctionInfo[]} functions with appended ABI\n */\nfunction decorateFunctionsWithAbi(functions, abi) {\n  const abiFunctions = abi.filter(elem => elem.type === 'function')\n  return functions.map(f => ({\n    ...f,\n    abi: abiFunctions.find(\n      functionAbi =>\n        encodeFunctionSignature(functionAbi) === encodeFunctionSignature(f.sig)\n    ),\n  }))\n}\n\n/**\n * @param {Object} roles\n * @return {Object}\n */\nconst getRoles = roles =>\n  roles.map(role => Object.assign(role, { bytes: keccak256(role.id) }))\n\n/**\n * Construct artifact object\n *\n * @param {ArappConfigFile} arapp Arapp config file\n * @param {Object[]} abi ABI\n * @param {string} sourceCode Solidity file\n * @return {Object} artifact\n */\nexport async function generateApplicationArtifact(arapp, abi, sourceCode) {\n  // Includes appId for each environemnt\n  const environments = decorateEnvrionmentsWithAppId(arapp.environments)\n\n  // Given a Solidity file, parses it and returns an object with the form:\n  // > {roles: [{ },...], functions: [{ },...]}\n  const { functions, roles } = await extractContractInfo(sourceCode)\n\n  // Includes abi for each function\n  // > [{ sig: , role: , notice: , abi: }]\n  const functionsWithAbi = decorateFunctionsWithAbi(functions, abi)\n\n  const arappRoles = getRoles(arapp.roles)\n\n  if (arappRoles !== roles) {\n    console.log(\n      'Warning: The roles defined on the arapp.json not match those on the contract file'\n    )\n  }\n\n  // TODO: Add deprectaedFunctions logic\n\n  return {\n    ...arapp,\n    flattenedCode: `./${SOLIDITY_FILE}`,\n    environments,\n    roles,\n    functions: functionsWithAbi,\n    abi,\n  }\n}\n"],"file":"generateArtifact.js"}