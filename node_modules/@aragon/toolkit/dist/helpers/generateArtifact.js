"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateApplicationArtifact = generateApplicationArtifact;

var _ethEnsNamehash = _interopRequireDefault(require("eth-ens-namehash"));

var _web3Utils = require("web3-utils");

var _web3EthAbi = require("web3-eth-abi");

var _constants = require("./constants");

var _solidityExtractor = require("./solidity-extractor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const decorateEnvrionmentsWithAppId = environments => {
  const decoratedEnvrionment = {};

  for (const [key, value] of Object.entries(environments)) {
    decoratedEnvrionment[key] = { ...value,
      appId: _ethEnsNamehash.default.hash(value.appName)
    };
  }

  return decoratedEnvrionment;
};
/**
 * Appends the abi of a function to the functions array
 * @param {FunctionInfo[]} functions functions
 * @param {Object[]} abi ABI
 * @return {FunctionInfo[]} functions with appended ABI
 */


function decorateFunctionsWithAbi(functions, abi) {
  const abiFunctions = abi.filter(elem => elem.type === 'function');
  return functions.map(f => ({ ...f,
    abi: abiFunctions.find(functionAbi => (0, _web3EthAbi.encodeFunctionSignature)(functionAbi) === (0, _web3EthAbi.encodeFunctionSignature)(f.sig))
  }));
}
/**
 * @param {Object} roles
 * @return {Object}
 */


const getRoles = roles => roles.map(role => Object.assign(role, {
  bytes: (0, _web3Utils.keccak256)(role.id)
}));
/**
 * Construct artifact object
 *
 * @param {ArappConfigFile} arapp Arapp config file
 * @param {Object[]} abi ABI
 * @param {string} sourceCode Solidity file
 * @return {Object} artifact
 */


async function generateApplicationArtifact(arapp, abi, sourceCode) {
  // Includes appId for each environemnt
  const environments = decorateEnvrionmentsWithAppId(arapp.environments); // Given a Solidity file, parses it and returns an object with the form:
  // > {roles: [{ },...], functions: [{ },...]}

  const {
    functions,
    roles
  } = await (0, _solidityExtractor.extractContractInfo)(sourceCode); // Includes abi for each function
  // > [{ sig: , role: , notice: , abi: }]

  const functionsWithAbi = decorateFunctionsWithAbi(functions, abi);
  const arappRoles = getRoles(arapp.roles);

  if (arappRoles !== roles) {
    console.log('Warning: The roles defined on the arapp.json not match those on the contract file');
  } // TODO: Add deprectaedFunctions logic


  return { ...arapp,
    flattenedCode: `./${_constants.SOLIDITY_FILE}`,
    environments,
    roles,
    functions: functionsWithAbi,
    abi
  };
}
//# sourceMappingURL=generateArtifact.js.map