{"version":3,"sources":["../src/util.js"],"names":["addressesEqual","first","second","toLowerCase","isAddress","addr","test","isValidAragonId","aragonId","convertDAOIdToSubdomain","RegExp","ARAGON_DOMAIN","Error","expandLink","link","name","address","placeholder","repeat","length","regex","addressBytes","slice","getRecommendedGasLimit","web3","estimatedGas","gasFuzzFactor","DEFAULT_GAS_FUZZ_FACTOR","latestBlock","eth","getBlock","blockGasLimit","gasLimit","upperGasLimit","Math","round","LAST_BLOCK_GAS_LIMIT_FACTOR","bufferedGasLimit","getContract","pkg","contract","artifact","require","getIpfsCacheFiles","path","resolve","getAragonGanacheFiles"],"mappings":";;;;;;;;;;AAAA;;AAEA;;;;AADA;AAaO,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AAC5CD,EAAAA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACE,WAAN,EAAjB;AACAD,EAAAA,MAAM,GAAGA,MAAM,IAAIA,MAAM,CAACC,WAAP,EAAnB;AACA,SAAOF,KAAK,KAAKC,MAAjB;AACD;;AAEM,MAAME,SAAS,GAAGC,IAAI,IAAI,oBAAoBC,IAApB,CAAyBD,IAAzB,CAA1B;AAEP;;;;;;;;;AAKO,SAASE,eAAT,CAAyBC,QAAzB,EAAmC;AACxC,SAAO,eAAeF,IAAf,CAAoBE,QAApB,CAAP;AACD;AAED;;;;;;;;AAMO,SAASC,uBAAT,CAAiCD,QAAjC,EAA2C;AAChD;AACA,MAAI,IAAIE,MAAJ,CAAY,iBAAgBC,wBAAc,GAA1C,EAA8CL,IAA9C,CAAmDE,QAAnD,CAAJ,EACE,OAAOA,QAAP;AAEF,MAAI,CAACD,eAAe,CAACC,QAAD,CAApB,EAAgC,MAAM,IAAII,KAAJ,CAAW,mBAAkBJ,QAAS,EAAtC,CAAN;AAEhC,SAAQ,GAAEA,QAAS,IAAGG,wBAAc,EAApC;AACD;;AAEM,MAAME,UAAU,GAAGC,IAAI,IAAI;AAChC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,IAA1B;AACA,QAAMG,WAAW,GAAI,KAAIF,IAAK,GAAE,IAAIG,MAAJ,CAAW,KAAKH,IAAI,CAACI,MAArB,CAA6B,EAA7D;AACAL,EAAAA,IAAI,CAACG,WAAL,GAAmBA,WAAnB;AACAH,EAAAA,IAAI,CAACM,KAAL,GAAa,IAAIV,MAAJ,CAAWO,WAAX,EAAwB,GAAxB,CAAb;AACAH,EAAAA,IAAI,CAACO,YAAL,GAAoBL,OAAO,CAACM,KAAR,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAAxB,GAA+BN,OAAO,CAACM,KAAR,CAAc,CAAd,CAA/B,GAAkDN,OAAtE;AACA,SAAOF,IAAP;AACD,CAPM;AASP;;;;;;;;;;;;;AASO,MAAMS,sBAAsB,GAAG,OACpCC,IADoC,EAEpCC,YAFoC,EAGpCC,aAAa,GAAGC,kCAHoB,KAIjC;AACH;AACA,QAAMC,WAAW,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASC,QAAT,CAAkB,QAAlB,CAA1B;AACA,QAAMC,aAAa,GAAGH,WAAW,CAACI,QAAlC;AAEA,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWJ,aAAa,GAAGK,sCAA3B,CAAtB;AACA,MAAIX,YAAY,GAAGQ,aAAnB,EAAkC,OAAOR,YAAP,CAN/B,CAMmD;;AAEtD,QAAMY,gBAAgB,GAAGH,IAAI,CAACC,KAAL,CAAWV,YAAY,GAAGC,aAA1B,CAAzB;AAEA,MAAIW,gBAAgB,GAAGJ,aAAvB,EAAsC,OAAOI,gBAAP;AACtC,SAAOJ,aAAP;AACD,CAhBM;;;;AAkBA,MAAMK,WAAW,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC5C,QAAMC,QAAQ,GAAGC,OAAO,CAAE,GAAEH,GAAI,oBAAmBC,QAAS,OAApC,CAAxB;;AACA,SAAOC,QAAP;AACD,CAHM;;;;AAKA,MAAME,iBAAiB,GAAG,MAAM;AACrC,SAAOC,cAAKC,OAAL,CAAaH,OAAO,CAACG,OAAR,CAAgB,gBAAhB,CAAb,EAAgD,eAAhD,CAAP;AACD,CAFM;;;;AAIA,MAAMC,qBAAqB,GAAG,MAAM;AACzC,SAAOF,cAAKC,OAAL,CAAaH,OAAO,CAACG,OAAR,CAAgB,gBAAhB,CAAb,EAAgD,mBAAhD,CAAP;AACD,CAFM","sourcesContent":["import path from 'path'\n//\nimport {\n  ARAGON_DOMAIN,\n  DEFAULT_GAS_FUZZ_FACTOR,\n  LAST_BLOCK_GAS_LIMIT_FACTOR,\n} from './helpers/constants'\n\n/**\n * Check eth address equality without checksums\n * @param {string} first address\n * @param {string} second address\n * @returns {boolean} address equality\n */\nexport function addressesEqual(first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\nexport const isAddress = addr => /0x[a-fA-F0-9]{40}/.test(addr)\n\n/**\n * Validates an Aragon Id\n * @param {string} aragonId Aragon Id\n * @returns {boolean} `true` if valid\n */\nexport function isValidAragonId(aragonId) {\n  return /^[a-z0-9-]+$/.test(aragonId)\n}\n\n/**\n * Convert a DAO id to its subdomain\n * E.g. mydao -> mydao.aragonid.eth\n * @param {string} aragonId Aragon Id\n * @returns {string} DAO subdomain\n */\nexport function convertDAOIdToSubdomain(aragonId) {\n  // If already a subdomain, return\n  if (new RegExp(`^([a-z0-9-]+).${ARAGON_DOMAIN}$`).test(aragonId))\n    return aragonId\n\n  if (!isValidAragonId(aragonId)) throw new Error(`Invalid DAO Id: ${aragonId}`)\n\n  return `${aragonId}.${ARAGON_DOMAIN}`\n}\n\nexport const expandLink = link => {\n  const { name, address } = link\n  const placeholder = `__${name}${'_'.repeat(38 - name.length)}`\n  link.placeholder = placeholder\n  link.regex = new RegExp(placeholder, 'g')\n  link.addressBytes = address.slice(0, 2) === '0x' ? address.slice(2) : address\n  return link\n}\n\n/**\n *\n * Calculate the recommended gas limit\n *\n * @param {*} web3 eth provider to get the last block gas limit\n * @param {number} estimatedGas estimated gas\n * @param {number} gasFuzzFactor defaults to 1.5\n * @returns {number} gasLimit\n */\nexport const getRecommendedGasLimit = async (\n  web3,\n  estimatedGas,\n  gasFuzzFactor = DEFAULT_GAS_FUZZ_FACTOR\n) => {\n  // TODO print these values if --debug is passed\n  const latestBlock = await web3.eth.getBlock('latest')\n  const blockGasLimit = latestBlock.gasLimit\n\n  const upperGasLimit = Math.round(blockGasLimit * LAST_BLOCK_GAS_LIMIT_FACTOR)\n  if (estimatedGas > upperGasLimit) return estimatedGas // TODO print a warning?\n\n  const bufferedGasLimit = Math.round(estimatedGas * gasFuzzFactor)\n\n  if (bufferedGasLimit < upperGasLimit) return bufferedGasLimit\n  return upperGasLimit\n}\n\nexport const getContract = (pkg, contract) => {\n  const artifact = require(`${pkg}/build/contracts/${contract}.json`)\n  return artifact\n}\n\nexport const getIpfsCacheFiles = () => {\n  return path.resolve(require.resolve('@aragon/aragen'), '../ipfs-cache')\n}\n\nexport const getAragonGanacheFiles = () => {\n  return path.resolve(require.resolve('@aragon/aragen'), '../aragon-ganache')\n}\n"],"file":"util.js"}