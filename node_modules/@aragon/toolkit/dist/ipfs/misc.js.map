{"version":3,"sources":["../../src/ipfs/misc.js"],"names":["ensureLocalDaemon","projectPath","binPath","repoPath","apiPort","gatewayPort","swarmPort","logger","noop","apiAddress","protocol","port","host","processController","detached","detach","httpClient","getHttpClient","err","address","connectOrThrow","connectThroughHTTP","version","Error","JSON","stringify","parseAddressAsURL","uri","url","URL","replace","hostname","parseInt","cleanVersion","getDistName","os","arch"],"mappings":"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","sourcesContent":["import ipfsHttpClient from 'ipfs-http-client' // TODO: import only submodules?\nimport url from 'url'\nimport { exists } from 'fs-extra'\n//\nimport { initPackage, noop } from '../node'\nimport { ensureRepoInitialized, setPorts, configureCors } from './config'\nimport { pinArtifacts } from './aragon'\nimport { startLocalDaemon, isLocalDaemonRunning } from './daemon'\nimport { installGoIpfs } from './install'\n\nexport const ensureLocalDaemon = async ({\n  projectPath,\n  binPath,\n  repoPath,\n  apiPort,\n  gatewayPort,\n  swarmPort,\n  logger = noop,\n}) => {\n  /**\n   * Ensure project\n   */\n  if (await exists(projectPath)) {\n    logger(`Project already initialized: ${projectPath}`)\n  } else {\n    logger(`Project initializing: ${projectPath}`)\n    await initPackage(projectPath)\n  }\n\n  /**\n   * Ensure binaries\n   */\n  if (await exists(binPath)) {\n    logger(`Go-ipfs already installed: ${projectPath}`)\n  } else {\n    logger(`Go-ipfs installing: ${projectPath}`)\n    await installGoIpfs(true, projectPath)\n    logger(`Go-ipfs installed: ${projectPath}`)\n  }\n\n  /**\n   * Ensure daemon running\n   */\n  const apiAddress = { protocol: 'http', port: apiPort, host: '127.0.0.1' }\n  if (await isLocalDaemonRunning(apiAddress)) {\n    logger(`Daemon already started on port: ${apiPort}`)\n    return\n  }\n\n  logger(`Daemon starting on port: ${apiPort}`)\n  try {\n    await ensureRepoInitialized(binPath, repoPath)\n    await setPorts(repoPath, apiPort, gatewayPort, swarmPort)\n    const processController = await startLocalDaemon(binPath, repoPath, {\n      detached: true,\n      logger,\n    })\n    processController.detach()\n    logger(`Daemon started on port: ${apiPort}`)\n\n    const httpClient = await getHttpClient(`http://localhost:${apiPort}`)\n    await configureCors(httpClient)\n    await pinArtifacts(httpClient)\n    logger('Daemon ready!!')\n  } catch (err) {\n    logger('Daemon failed to start...')\n  }\n}\n\nexport const getHttpClient = async address => {\n  // try {\n  return connectOrThrow(address)\n  // } catch (err) {\n  // if (!address.includes('localhost')) {\n  //   throw err\n  // }\n\n  // // connecting locally failed\n  // const startAndRetry = await askForConfirmation(\n  //   'The local IPFS Daemon is not running, do you wish to start it?'\n  // )\n  // if (startAndRetry) {\n  //   await startLocalDaemon()\n  //   return getHttpClient(address)\n  // }\n  // }\n}\nexport async function connectOrThrow(address) {\n  try {\n    const httpClient = connectThroughHTTP(address)\n    await httpClient.version()\n    return httpClient\n  } catch (err) {\n    throw new Error(\n      `Could not connect to the IPFS API at ${JSON.stringify(address)}`\n    )\n  }\n}\n\nexport function connectThroughHTTP(address) {\n  if (typeof address === 'string') {\n    return ipfsHttpClient(parseAddressAsURL(address))\n  }\n\n  return ipfsHttpClient(address)\n}\n\nexport function parseAddressAsURL(address) {\n  const uri = new url.URL(address)\n  return {\n    protocol: uri.protocol.replace(':', ''),\n    host: uri.hostname,\n    port: parseInt(uri.port),\n  }\n}\n\n// https://github.com/ipfs/npm-go-ipfs/blob/master/link-ipfs.js#L8\n// https://github.com/ipfs/npm-go-ipfs#publish-a-new-version-of-this-module-with-exact-same-go-ipfs-version\nexport const cleanVersion = version => version.replace(/-hacky[0-9]+/, '')\nexport const getDistName = (version, os, arch) =>\n  `go-ipfs_v${version}_${os}-${arch}.tar.gz`\n"],"file":"misc.js"}