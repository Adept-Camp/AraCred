"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installGoIpfs = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _node = require("../node");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
const installGoIpfs = async (local, location, distVersion = _constants.GO_IMPL_DIST_VERSION, distUrl = _constants.GO_IMPL_DIST_URL, options = {}) => {
  const {
    logger = _node.noop
  } = options;
  const npmBinary = (0, _node.getNodePackageManager)();
  const exacaOptions = {
    cwd: local ? location : undefined,
    env: {
      /*
       *  https://github.com/ipfs/npm-go-ipfs-dep/blob/v0.4.21/src/index.js#L71
       */
      GO_IPFS_DIST_URL: distUrl
      /*
       *  specifying `TARGET_VERSION` here, will throw an error, because:
       *  https://github.com/ipfs/npm-go-ipfs/blob/master/link-ipfs.js#L49
       */
      // TARGET_VERSION: distVersion

    }
  };
  const npmArgs = ['install', `go-ipfs@${distVersion}`, local ? '--save' : '--global'];
  const logPrefix = `npm ${npmArgs.join(' ')}:`;
  const installProcess = (0, _execa.default)(npmBinary, npmArgs, exacaOptions);
  installProcess.stdout.on('data', data => {
    if (data) logger(`${logPrefix} ${data}`);
  });

  try {
    return await installProcess;
  } catch (err) {
    if (err.stderr && err.stderr.includes('No matching version found')) {
      throw new Error(`NPM cannot find version ${distVersion}. For more versions see: http://npmjs.com/package/go-ipfs?activeTab=versions`);
    } else {
      throw new Error(err);
    }
  }
};

exports.installGoIpfs = installGoIpfs;
//# sourceMappingURL=install.js.map