{"version":3,"sources":["../../src/ipfs/data.js"],"names":["extractCIDsFromMerkleDAG","merkleDAG","options","CIDs","push","cid","recursive","isDir","links","map","merkleDAGOfLink","CIDsOfLink","isDirectory","data","length","toString","parseMerkleDAG","dagNode","parsed","toJSON","getMerkleDAG","client","progressCallback","noop","ipfsObj","object","get","link","Object","assign"],"mappings":";;;;;;;;;;AAAA;;AAEO,SAASA,wBAAT,CAAkCC,SAAlC,EAA6CC,OAAO,GAAG,EAAvD,EAA2D;AAChE,QAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACC,IAAL,CAAUH,SAAS,CAACI,GAApB;;AAEA,MAAIH,OAAO,CAACI,SAAR,IAAqBL,SAAS,CAACM,KAA/B,IAAwCN,SAAS,CAACO,KAAtD,EAA6D;AAC3DP,IAAAA,SAAS,CAACO,KAAV,CACGC,GADH,CACOC,eAAe,IAClBV,wBAAwB,CAACU,eAAD,EAAkBR,OAAlB,CAF5B,EAIGO,GAJH,CAIOE,UAAU,IAAIR,IAAI,CAACC,IAAL,CAAU,GAAGO,UAAb,CAJrB;AAKD;;AAED,SAAOR,IAAP;AACD;;AAEM,SAASS,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAOA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBD,IAAI,CAACE,QAAL,OAAoB,cAAhD;AACD,C,CAED;AACA;;;AACO,SAASC,cAAT,CAAwBX,GAAxB,EAA6BY,OAA7B,EAAsC;AAC3C,QAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,EAAf,CAD2C,CAE3C;;AACAD,EAAAA,MAAM,CAACb,GAAP,GAAaA,GAAb;AACAa,EAAAA,MAAM,CAACX,KAAP,GAAeK,WAAW,CAACM,MAAM,CAACL,IAAR,CAA1B,CAJ2C,CAK3C;;AACA,SAAOK,MAAM,CAACL,IAAd;;AACA,MAAI,CAACK,MAAM,CAACX,KAAZ,EAAmB;AACjB;AACA,WAAOW,MAAM,CAACV,KAAd;AACD;;AACD,SAAOU,MAAP;AACD;;AAEM,eAAeE,YAAf,CAA4BC,MAA5B,EAAoChB,GAApC,EAAyCH,OAAO,GAAG,EAAnD,EAAuD;AAC5D,QAAM;AAAEI,IAAAA,SAAF;AAAagB,IAAAA,gBAAgB,GAAGC;AAAhC,MAAyCrB,OAA/C;AAEAoB,EAAAA,gBAAgB,CAAC,CAAD,EAAIjB,GAAJ,CAAhB;AACA,QAAMmB,OAAO,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcC,GAAd,CAAkBrB,GAAlB,CAAtB;AACAiB,EAAAA,gBAAgB,CAAC,CAAD,EAAIjB,GAAJ,CAAhB;AACA,QAAMJ,SAAS,GAAGe,cAAc,CAACX,GAAD,EAAMmB,OAAN,CAAhC;;AAEA,MAAIlB,SAAS,IAAIL,SAAS,CAACM,KAAvB,IAAgCN,SAAS,CAACO,KAA9C,EAAqD;AACnD;AACA,SAAK,MAAMmB,IAAX,IAAmB1B,SAAS,CAACO,KAA7B,EAAoC;AAClC,YAAMiB,MAAM,GAAG,MAAML,YAAY,CAACC,MAAD,EAASM,IAAI,CAACtB,GAAd,EAAmBH,OAAnB,CAAjC;AACA0B,MAAAA,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoBF,MAApB;AACD;AACF;;AAED,SAAOxB,SAAP;AACD","sourcesContent":["import { noop } from '../node'\n\nexport function extractCIDsFromMerkleDAG(merkleDAG, options = {}) {\n  const CIDs = []\n  CIDs.push(merkleDAG.cid)\n\n  if (options.recursive && merkleDAG.isDir && merkleDAG.links) {\n    merkleDAG.links\n      .map(merkleDAGOfLink =>\n        extractCIDsFromMerkleDAG(merkleDAGOfLink, options)\n      )\n      .map(CIDsOfLink => CIDs.push(...CIDsOfLink))\n  }\n\n  return CIDs\n}\n\nexport function isDirectory(data) {\n  return data.length === 2 && data.toString() === '\\u0008\\u0001'\n}\n\n// object.get returns an object of type DAGNode\n// https://github.com/ipld/js-ipld-dag-pb#dagnode-instance-methods-and-properties\nexport function parseMerkleDAG(cid, dagNode) {\n  const parsed = dagNode.toJSON()\n  // add relevant data\n  parsed.cid = cid\n  parsed.isDir = isDirectory(parsed.data)\n  // remove irrelevant data\n  delete parsed.data\n  if (!parsed.isDir) {\n    // if it's a big file it will have links to its other chunks\n    delete parsed.links\n  }\n  return parsed\n}\n\nexport async function getMerkleDAG(client, cid, options = {}) {\n  const { recursive, progressCallback = noop } = options\n\n  progressCallback(1, cid)\n  const ipfsObj = await client.object.get(cid)\n  progressCallback(2, cid)\n  const merkleDAG = parseMerkleDAG(cid, ipfsObj)\n\n  if (recursive && merkleDAG.isDir && merkleDAG.links) {\n    // fetch the MerkleDAG of each link recursively\n    for (const link of merkleDAG.links) {\n      const object = await getMerkleDAG(client, link.cid, options)\n      Object.assign(link, object)\n    }\n  }\n\n  return merkleDAG\n}\n"],"file":"data.js"}