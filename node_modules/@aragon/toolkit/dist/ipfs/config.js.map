{"version":3,"sources":["../../src/ipfs/config.js"],"names":["isCorsConfigured","httpClient","conf","config","get","allowOrigin","CorsAllowAll","key","split","pop","allowMethods","Error","map","value","join","configureCors","Promise","all","set","ensureRepoInitialized","binPath","repoPath","NO_INSTALLATION_MSG","path","resolve","env","IPFS_PATH","setPorts","apiPort","gatewayPort","swarmPort","patchRepoConfig","Addresses","API","Announce","Gateway","NoAnnounce","Swarm","getDefaultRepoPath","homedirPath","getPeerIDConfig","repoConfig","Identity","PeerID","getPorts","api","gateway","swarm","getRepoVersion","versionFilePath","version","getRepoSize","reject","err","size","humanReadableSize","getRepoConfig","configFilePath","patch","nextConfig","Object","assign","spaces"],"mappings":"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","sourcesContent":["import path, { join as joinPath } from 'path'\nimport { readJson, writeJson } from 'fs-extra'\nimport getFolderSize from 'get-folder-size'\nimport { existsSync } from 'fs'\nimport { homedir } from 'os'\nimport byteSize from 'byte-size'\nimport execa from 'execa'\n//\nimport { NO_INSTALLATION_MSG } from './constants'\n\nexport const isCorsConfigured = async httpClient => {\n  const conf = await httpClient.config.get('API.HTTPHeaders')\n  const allowOrigin = CorsAllowAll[0].key.split('.').pop()\n  const allowMethods = CorsAllowAll[1].key.split('.').pop()\n  if (conf && conf[allowOrigin] && conf[allowMethods]) {\n    return true\n  } else {\n    throw new Error(`Please set the following flags in your IPFS node:\n    ${CorsAllowAll.map(({ key, value }) => {\n      return `${key}: ${value}`\n    }).join('\\n    ')}`)\n  }\n}\n\nexport const configureCors = async httpClient => {\n  return Promise.all(\n    CorsAllowAll.map(({ key, value }) => httpClient.config.set(key, value))\n  )\n}\n\nconst CorsAllowAll = [\n  {\n    key: 'API.HTTPHeaders.Access-Control-Allow-Origin',\n    value: ['*'],\n  },\n  {\n    key: 'API.HTTPHeaders.Access-Control-Allow-Methods',\n    value: ['PUT', 'GET', 'POST'],\n  },\n]\n\nexport const ensureRepoInitialized = async (binPath, repoPath) => {\n  if (!binPath) {\n    throw new Error(NO_INSTALLATION_MSG)\n  }\n\n  if (!existsSync(path.resolve(repoPath))) {\n    await execa(binPath, ['init'], {\n      env: {\n        IPFS_PATH: repoPath,\n      },\n    })\n  }\n}\n\nexport const setPorts = async (repoPath, apiPort, gatewayPort, swarmPort) => {\n  await patchRepoConfig(repoPath, {\n    Addresses: {\n      API: `/ip4/0.0.0.0/tcp/${apiPort}`,\n      Announce: [],\n      Gateway: `/ip4/0.0.0.0/tcp/${gatewayPort}`,\n      NoAnnounce: [],\n      Swarm: [`/ip4/0.0.0.0/tcp/${swarmPort}`, `/ip6/::/tcp/${swarmPort}`],\n    },\n  })\n}\n\nexport function getDefaultRepoPath() {\n  const homedirPath = homedir()\n  return joinPath(homedirPath, '.ipfs')\n}\n\nexport function getPeerIDConfig(repoConfig) {\n  return repoConfig.Identity.PeerID\n}\n\nexport function getPorts(repoConfig) {\n  return {\n    // default: \"/ip4/127.0.0.1/tcp/5001\"\n    api: repoConfig.Addresses.API.split('/').pop(),\n    // default: \"/ip4/127.0.0.1/tcp/8080\"\n    gateway: repoConfig.Addresses.Gateway.split('/').pop(),\n    // default: [\n    //   \"/ip4/0.0.0.0/tcp/4001\"\n    //   \"/ip6/::/tcp/4001\"\n    // ]\n    swarm: repoConfig.Addresses.Swarm[0].split('/').pop(),\n  }\n}\n\nexport async function getRepoVersion(repoPath) {\n  const versionFilePath = joinPath(repoPath, 'version')\n  const version = await readJson(versionFilePath)\n  return version\n}\n\nexport async function getRepoSize(repoPath) {\n  return new Promise((resolve, reject) => {\n    getFolderSize(repoPath, (err, size) => {\n      if (err) {\n        reject(err)\n      } else {\n        const humanReadableSize = byteSize(size)\n        resolve(humanReadableSize)\n      }\n    })\n  })\n}\n\nexport async function getRepoConfig(repoPath) {\n  const configFilePath = joinPath(repoPath, 'config')\n  const config = await readJson(configFilePath)\n  return config\n}\n\nexport async function patchRepoConfig(repoPath, patch) {\n  const configFilePath = joinPath(repoPath, 'config')\n  const repoConfig = await readJson(configFilePath)\n  if (!repoConfig) {\n    throw new Error(`Cannot read the config file at: ${configFilePath}`)\n  }\n  const nextConfig = Object.assign(repoConfig, patch)\n  await writeJson(configFilePath, nextConfig, { spaces: 2 })\n  return nextConfig\n}\n"],"file":"config.js"}