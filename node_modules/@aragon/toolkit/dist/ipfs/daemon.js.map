{"version":3,"sources":["../../src/ipfs/daemon.js"],"names":["getBinaryPath","__dirname","startLocalDaemon","binPath","repoPath","options","Error","NO_INSTALLATION_MSG","processSetup","cmd","args","DEFAULT_DAEMON_ARGS","execaOpts","detached","env","IPFS_PATH","readyOutput","DAEMON_READY_OUTPUT","timeout","DAEMON_START_TIMEOUT","logger","isLocalDaemonRunning","address","protocol","host","port","portTaken","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAOO,MAAMA,aAAa,GAAG,MAAM,qBAAU,MAAV,EAAkB,0BAAeC,SAAf,CAAlB,CAA5B;;;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,OAAO,GAAG,EAA9B,KAAqC;AACnE,MAAI,CAACF,OAAL,EAAc;AACZ,UAAM,IAAIG,KAAJ,CAAUC,8BAAV,CAAN;AACD;;AAED,QAAMC,YAAY,GAAG;AACnBC,IAAAA,GAAG,EAAEN,OADc;AAEnBO,IAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,GAAGC,8BAAd,CAFa;AAGnBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAER,OAAO,CAACQ,QADT;AAETC,MAAAA,GAAG,EAAE;AACHC,QAAAA,SAAS,EAAEX;AADR;AAFI,KAHQ;AASnBY,IAAAA,WAAW,EAAEC,8BATM;AAUnBC,IAAAA,OAAO,EAAEC,+BAVU;AAWnBC,IAAAA,MAAM,EAAEf,OAAO,CAACe;AAXG,GAArB;AAcA,SAAO,wBAAaZ,YAAb,CAAP;AACD,CApBM;AAsBP;;;;;;;;;;AAMO,MAAMa,oBAAoB,GAAG,MAAMC,OAAN,IAAiB;AACnDA,EAAAA,OAAO,GAAGA,OAAO,IAAI;AACnBC,IAAAA,QAAQ,EAAE,MADS;AAEnBC,IAAAA,IAAI,EAAE,WAFa;AAGnBC,IAAAA,IAAI,EAAE;AAHa,GAArB;AAKA,QAAMC,SAAS,GAAG,MAAM,uBAAYJ,OAAO,CAACG,IAApB,CAAxB;;AAEA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAO,KAAP;AACD;;AAED,MAAI;AACF;AACA;AACA,UAAM,0BAAeJ,OAAf,CAAN;AACA,WAAO,IAAP;AACD,GALD,CAKE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CApBM","sourcesContent":["import { connectOrThrow } from './misc'\nimport { startProcess, getBinary, isPortTaken, getPackageRoot } from '../node'\nimport {\n  DAEMON_START_TIMEOUT,\n  DAEMON_READY_OUTPUT,\n  DEFAULT_DAEMON_ARGS,\n  NO_INSTALLATION_MSG,\n} from './constants'\n\nexport const getBinaryPath = () => getBinary('ipfs', getPackageRoot(__dirname))\n\nexport const startLocalDaemon = (binPath, repoPath, options = {}) => {\n  if (!binPath) {\n    throw new Error(NO_INSTALLATION_MSG)\n  }\n\n  const processSetup = {\n    cmd: binPath,\n    args: ['daemon', ...DEFAULT_DAEMON_ARGS],\n    execaOpts: {\n      detached: options.detached,\n      env: {\n        IPFS_PATH: repoPath,\n      },\n    },\n    readyOutput: DAEMON_READY_OUTPUT,\n    timeout: DAEMON_START_TIMEOUT,\n    logger: options.logger,\n  }\n\n  return startProcess(processSetup)\n}\n\n/**\n * Check whether the daemon is running by connecting to the API.\n *\n * @param {URL} address a `URL` object\n * @returns {boolean} true if it is running\n */\nexport const isLocalDaemonRunning = async address => {\n  address = address || {\n    protocol: 'http',\n    host: '127.0.0.1',\n    port: 5001,\n  }\n  const portTaken = await isPortTaken(address.port)\n\n  if (!portTaken) {\n    return false\n  }\n\n  try {\n    // if port is taken, connect to the API,\n    // otherwise we can assume the port is taken by a different process\n    await connectOrThrow(address)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n"],"file":"daemon.js"}