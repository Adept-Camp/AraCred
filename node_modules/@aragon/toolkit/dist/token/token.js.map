{"version":3,"sources":["../../src/token/token.js"],"names":["deployMiniMeTokenFactory","web3","senderAccount","gasPrice","progressCallback","deployContract","deployMiniMeToken","tokenName","decimalUnits","symbol","transferEnabled","factoryAddress","ZERO_ADDRESS","artifactPackage","artifactName","contractArgs","artifact","contract","eth","Contract","abi","transaction","deploy","data","bytecode","arguments","estimatedGas","estimateGas","sendPromise","send","from","gas","result","on","receipt","address","contractAddress","transactionHash","txHash","changeController","tokenAddress","newController","tokenAbi","getAccounts","tx","methods"],"mappings":"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","sourcesContent":["import { getContract, getRecommendedGasLimit } from '../util'\nimport { ZERO_ADDRESS } from '../helpers/constants'\n\n/**\n *\n * Progress callback will be invoked with the following integers:\n * (1) - Estimating gas\n * (2, gas) - Estimated gas\n * (3) - Waiting for the tx to be mined\n *\n * @param {*} web3 todo\n * @param {*} senderAccount todo\n * @param {*} gasPrice todo\n * @param {*} progressCallback todo\n * @returns {*} todo\n */\nexport const deployMiniMeTokenFactory = async (\n  web3,\n  senderAccount,\n  gasPrice,\n  progressCallback\n) => {\n  return deployContract(\n    web3,\n    senderAccount,\n    gasPrice,\n    '@aragon/apps-shared-minime',\n    'MiniMeTokenFactory',\n    [],\n    progressCallback\n  )\n}\n\n/**\n *\n * Progress callback will be invoked with the following integers:\n * (1) - Estimating gas\n * (2, gas) - Estimated gas\n * (3) - Waiting for the tx to be mined\n *\n * @param {*} web3 todo\n * @param {*} senderAccount todo\n * @param {*} gasPrice todo\n * @param {*} tokenName todo\n * @param {*} decimalUnits todo\n * @param {*} symbol todo\n * @param {*} transferEnabled todo\n * @param {*} factoryAddress todo\n * @param {*} progressCallback todo\n * @returns {*} todo\n */\nexport const deployMiniMeToken = async (\n  web3,\n  senderAccount,\n  gasPrice,\n  tokenName,\n  decimalUnits,\n  symbol,\n  transferEnabled,\n  factoryAddress,\n  progressCallback\n) => {\n  return deployContract(\n    web3,\n    senderAccount,\n    gasPrice,\n    '@aragon/apps-shared-minime',\n    'MiniMeToken',\n    [\n      factoryAddress,\n      ZERO_ADDRESS,\n      0,\n      tokenName,\n      decimalUnits,\n      symbol,\n      transferEnabled,\n    ],\n    progressCallback\n  )\n}\n\nexport const deployContract = async (\n  web3,\n  senderAccount,\n  gasPrice,\n  artifactPackage,\n  artifactName,\n  contractArgs,\n  progressCallback\n) => {\n  const artifact = getContract(artifactPackage, artifactName)\n  const contract = new web3.eth.Contract(artifact.abi)\n\n  const transaction = contract.deploy({\n    data: artifact.bytecode,\n    arguments: contractArgs,\n  })\n\n  progressCallback(1)\n  const estimatedGas = await transaction.estimateGas()\n  progressCallback(2, estimatedGas)\n\n  const sendPromise = transaction.send({\n    from: senderAccount,\n    gas: await getRecommendedGasLimit(web3, estimatedGas),\n    gasPrice,\n  })\n\n  const result = {}\n\n  sendPromise.on('receipt', receipt => {\n    result.address = receipt.contractAddress\n  })\n  sendPromise.on('transactionHash', transactionHash => {\n    result.txHash = transactionHash\n  })\n\n  progressCallback(3)\n  await sendPromise\n\n  return result\n}\n\n/**\n * Change the controller of a MiniMe token\n *\n * @param {Object} web3 Web3\n * @param {string} tokenAddress MiniMe token address\n * @param {string} newController Controller address\n * @param {string} gasPrice Gas price\n * @returns {Promise<Object>} Transaction receipt\n */\nexport const changeController = async (\n  web3,\n  tokenAddress,\n  newController,\n  gasPrice\n) => {\n  const tokenAbi = getContract('@aragon/apps-shared-minime', 'MiniMeToken').abi\n\n  const contract = new web3.eth.Contract(tokenAbi, tokenAddress)\n  const from = (await web3.eth.getAccounts())[0]\n  const tx = contract.methods.changeController(newController)\n  const gas = await getRecommendedGasLimit(web3, await tx.estimateGas({ from }))\n\n  return tx.send({ from, gas, gasPrice })\n}\n"],"file":"token.js"}