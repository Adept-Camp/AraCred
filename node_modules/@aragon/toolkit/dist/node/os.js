"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinary = exports.getGlobalBinary = exports.getLocalBinary = void 0;

var _which = _interopRequireDefault(require("which"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _misc = require("./misc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
const getLocalBinary = (binaryName, packageRoot, options = {}) => {
  const {
    logger = _misc.debugLogger
  } = options; // check local node_modules

  let binaryPath = _path.default.join(packageRoot, 'node_modules', '.bin', binaryName);

  logger(`Searching binary ${binaryName} at ${binaryPath}`);

  if (_fs.default.existsSync(binaryPath)) {
    return binaryPath;
  } // check parent node_modules


  binaryPath = _path.default.join(packageRoot, '..', '.bin', binaryName);
  logger(`Searching binary ${binaryName} at ${binaryPath}.`);

  if (_fs.default.existsSync(binaryPath)) {
    return binaryPath;
  } // check parent node_modules if this module is scoped (e.g.: @scope/package)


  binaryPath = _path.default.join(packageRoot, '..', '..', '.bin', binaryName);
  logger(`Searching binary ${binaryName} at ${binaryPath}.`);

  if (_fs.default.existsSync(binaryPath)) {
    return binaryPath;
  }

  return null;
};

exports.getLocalBinary = getLocalBinary;

const getGlobalBinary = (binaryName, options = {}) => {
  const {
    logger = _misc.debugLogger
  } = options;
  logger(`Searching binary ${binaryName} in the global PATH variable.`);

  try {
    return _which.default.sync(binaryName);
  } catch {
    return null;
  }
};
/**
 * Attempts to find the binary path locally and then globally.
 *
 * @param {string} binaryName e.g.: `ipfs`
 * @param {string} packageRoot
 * @returns {string} the path to the binary, `null` if unsuccessful
 */


exports.getGlobalBinary = getGlobalBinary;

const getBinary = (binaryName, packageRoot, options = {}) => {
  const {
    logger = _misc.debugLogger
  } = options;
  let binaryPath = getLocalBinary(binaryName, packageRoot, options);

  if (binaryPath === null) {
    binaryPath = getGlobalBinary(binaryName, options);
  }

  if (binaryPath === null) {
    logger(`Cannot find binary ${binaryName}.`);
  } else {
    logger(`Found binary ${binaryName} at ${binaryPath}.`);
  }

  return binaryPath;
};

exports.getBinary = getBinary;
//# sourceMappingURL=os.js.map