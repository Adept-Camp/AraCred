{"version":3,"sources":["../../src/node/os.js"],"names":["getLocalBinary","binaryName","packageRoot","options","logger","debugLogger","binaryPath","path","join","fs","existsSync","getGlobalBinary","which","sync","getBinary"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AADA;AAGO,MAAMA,cAAc,GAAG,CAACC,UAAD,EAAaC,WAAb,EAA0BC,OAAO,GAAG,EAApC,KAA2C;AACvE,QAAM;AAAEC,IAAAA,MAAM,GAAGC;AAAX,MAA2BF,OAAjC,CADuE,CAGvE;;AACA,MAAIG,UAAU,GAAGC,cAAKC,IAAL,CAAUN,WAAV,EAAuB,cAAvB,EAAuC,MAAvC,EAA+CD,UAA/C,CAAjB;;AAEAG,EAAAA,MAAM,CAAE,oBAAmBH,UAAW,OAAMK,UAAW,EAAjD,CAAN;;AACA,MAAIG,YAAGC,UAAH,CAAcJ,UAAd,CAAJ,EAA+B;AAC7B,WAAOA,UAAP;AACD,GATsE,CAWvE;;;AACAA,EAAAA,UAAU,GAAGC,cAAKC,IAAL,CAAUN,WAAV,EAAuB,IAAvB,EAA6B,MAA7B,EAAqCD,UAArC,CAAb;AAEAG,EAAAA,MAAM,CAAE,oBAAmBH,UAAW,OAAMK,UAAW,GAAjD,CAAN;;AACA,MAAIG,YAAGC,UAAH,CAAcJ,UAAd,CAAJ,EAA+B;AAC7B,WAAOA,UAAP;AACD,GAjBsE,CAmBvE;;;AACAA,EAAAA,UAAU,GAAGC,cAAKC,IAAL,CAAUN,WAAV,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,MAAnC,EAA2CD,UAA3C,CAAb;AAEAG,EAAAA,MAAM,CAAE,oBAAmBH,UAAW,OAAMK,UAAW,GAAjD,CAAN;;AACA,MAAIG,YAAGC,UAAH,CAAcJ,UAAd,CAAJ,EAA+B;AAC7B,WAAOA,UAAP;AACD;;AAED,SAAO,IAAP;AACD,CA5BM;;;;AA8BA,MAAMK,eAAe,GAAG,CAACV,UAAD,EAAaE,OAAO,GAAG,EAAvB,KAA8B;AAC3D,QAAM;AAAEC,IAAAA,MAAM,GAAGC;AAAX,MAA2BF,OAAjC;AAEAC,EAAAA,MAAM,CAAE,oBAAmBH,UAAW,+BAAhC,CAAN;;AAEA,MAAI;AACF,WAAOW,eAAMC,IAAN,CAAWZ,UAAX,CAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAO,IAAP;AACD;AACF,CAVM;AAYP;;;;;;;;;;;AAOO,MAAMa,SAAS,GAAG,CAACb,UAAD,EAAaC,WAAb,EAA0BC,OAAO,GAAG,EAApC,KAA2C;AAClE,QAAM;AAAEC,IAAAA,MAAM,GAAGC;AAAX,MAA2BF,OAAjC;AAEA,MAAIG,UAAU,GAAGN,cAAc,CAACC,UAAD,EAAaC,WAAb,EAA0BC,OAA1B,CAA/B;;AAEA,MAAIG,UAAU,KAAK,IAAnB,EAAyB;AACvBA,IAAAA,UAAU,GAAGK,eAAe,CAACV,UAAD,EAAaE,OAAb,CAA5B;AACD;;AAED,MAAIG,UAAU,KAAK,IAAnB,EAAyB;AACvBF,IAAAA,MAAM,CAAE,sBAAqBH,UAAW,GAAlC,CAAN;AACD,GAFD,MAEO;AACLG,IAAAA,MAAM,CAAE,gBAAeH,UAAW,OAAMK,UAAW,GAA7C,CAAN;AACD;;AAED,SAAOA,UAAP;AACD,CAhBM","sourcesContent":["import which from 'which'\nimport path from 'path'\nimport fs from 'fs'\n//\nimport { debugLogger } from './misc'\n\nexport const getLocalBinary = (binaryName, packageRoot, options = {}) => {\n  const { logger = debugLogger } = options\n\n  // check local node_modules\n  let binaryPath = path.join(packageRoot, 'node_modules', '.bin', binaryName)\n\n  logger(`Searching binary ${binaryName} at ${binaryPath}`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  // check parent node_modules\n  binaryPath = path.join(packageRoot, '..', '.bin', binaryName)\n\n  logger(`Searching binary ${binaryName} at ${binaryPath}.`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  // check parent node_modules if this module is scoped (e.g.: @scope/package)\n  binaryPath = path.join(packageRoot, '..', '..', '.bin', binaryName)\n\n  logger(`Searching binary ${binaryName} at ${binaryPath}.`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  return null\n}\n\nexport const getGlobalBinary = (binaryName, options = {}) => {\n  const { logger = debugLogger } = options\n\n  logger(`Searching binary ${binaryName} in the global PATH variable.`)\n\n  try {\n    return which.sync(binaryName)\n  } catch {\n    return null\n  }\n}\n\n/**\n * Attempts to find the binary path locally and then globally.\n *\n * @param {string} binaryName e.g.: `ipfs`\n * @param {string} packageRoot\n * @returns {string} the path to the binary, `null` if unsuccessful\n */\nexport const getBinary = (binaryName, packageRoot, options = {}) => {\n  const { logger = debugLogger } = options\n\n  let binaryPath = getLocalBinary(binaryName, packageRoot, options)\n\n  if (binaryPath === null) {\n    binaryPath = getGlobalBinary(binaryName, options)\n  }\n\n  if (binaryPath === null) {\n    logger(`Cannot find binary ${binaryName}.`)\n  } else {\n    logger(`Found binary ${binaryName} at ${binaryPath}.`)\n  }\n\n  return binaryPath\n}\n"],"file":"os.js"}