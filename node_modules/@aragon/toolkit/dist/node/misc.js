"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArchForGO = exports.getPlatformForGO = exports.getArch = exports.getPlatform = exports.debugLogger = exports.noop = exports.withTimeout = void 0;

var _goPlatform = _interopRequireDefault(require("go-platform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const withTimeout = async (promise, timeout, error) => {
  let timeoutObject;
  const timeoutPromise = new Promise((resolve, reject) => {
    timeoutObject = setTimeout(() => {
      reject(error);
    }, timeout);
  });

  try {
    await Promise.race([promise, timeoutPromise]);
    /**
     * If we don't use `clearTimeout` the process will stay alive
     * until the timeout has been processed: <https://nodejs.org/api/timers.html#timers_class_timeout>
     */

    clearTimeout(timeoutObject); // return the initial promise object

    return promise;
  } catch (err) {
    clearTimeout(timeoutObject);
    throw err;
  }
};
/**
 * No operation, this function will do nothing.
 *
 * A useful utility to assign as a default value for callbacks.
 */


exports.withTimeout = withTimeout;

const noop = () => {};

exports.noop = noop;
const debugLogger = process.env.DEBUG ? console.log : () => {};
exports.debugLogger = debugLogger;

const getPlatform = () => process.platform;

exports.getPlatform = getPlatform;

const getArch = () => process.arch;

exports.getArch = getArch;

const getPlatformForGO = () => _goPlatform.default.GOOS;

exports.getPlatformForGO = getPlatformForGO;

const getArchForGO = () => _goPlatform.default.GOARCH;

exports.getArchForGO = getArchForGO;
//# sourceMappingURL=misc.js.map