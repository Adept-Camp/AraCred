{"version":3,"sources":["../../src/node/process.js"],"names":["defaultKillSignal","getProcessTree","subprocess","psTree","pid","killProcessTree","logger","noop","children","forEach","child","process","kill","PID","attachProcess","stdout","pipe","stderr","stdin","detachProcess","destroy","unref","startProcess","cmd","args","execaOpts","readyOutput","timeout","output","request","Promise","resolve","reject","on","data","toString","includes","Error","attach","detach"],"mappings":"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","sourcesContent":["import execa from 'execa'\nimport { promisify } from 'util'\nimport psTree from 'ps-tree'\n//\nimport { withTimeout, noop } from './misc'\n\nexport const defaultKillSignal = 'SIGINT'\n\nexport const getProcessTree = subprocess => promisify(psTree)(subprocess.pid)\n\nexport const killProcessTree = async (subprocess, { logger = noop }) => {\n  const { children } = await getProcessTree(subprocess)\n\n  if (!children) {\n    return\n  }\n\n  children.forEach(child => {\n    // each child has the properties: COMMAND, PPID, PID, STAT\n    logger(`killing process with PID ${child.pid}, child of ${subprocess.pid}`)\n    process.kill(child.PID, defaultKillSignal)\n  })\n}\n\nexport const attachProcess = subprocess => {\n  subprocess.stdout.pipe(process.stdout)\n  subprocess.stderr.pipe(process.stderr)\n  process.stdin.pipe(subprocess.stdin)\n}\n\nexport const detachProcess = subprocess => {\n  subprocess.stderr.destroy()\n  subprocess.stdout.destroy()\n  subprocess.stdin.destroy()\n  subprocess.unref()\n}\n\nexport const startProcess = async ({\n  cmd,\n  args,\n  execaOpts = {},\n  readyOutput,\n  timeout,\n  logger = noop,\n}) => {\n  let output = ''\n\n  const request = new Promise((resolve, reject) => {\n    const subprocess = execa(cmd, args, execaOpts)\n    logger('spawned subprocess with PID: ', subprocess.pid)\n\n    subprocess.stderr.on('data', data => {\n      data = data.toString()\n      logger(`stderr: ${data}`)\n      if (!data.includes('DeprecationWarning')) reject(new Error(data))\n    })\n\n    subprocess.stdout.on('data', data => {\n      data = data.toString()\n      logger(`stdout: ${data}`)\n      // build the output log (to be able to err out if the time is up)\n      output = `${output}${data}\\n`\n      // check for ready signal\n      if (data.includes(readyOutput)) {\n        resolve({\n          output,\n          kill: () => killProcessTree(subprocess, { logger }),\n          attach: () => attachProcess(subprocess),\n          detach: () => detachProcess(subprocess),\n        })\n      }\n    })\n  })\n\n  return withTimeout(\n    request,\n    timeout,\n    new Error(`Starting the process timed out:\\n${output}`)\n  )\n}\n"],"file":"process.js"}