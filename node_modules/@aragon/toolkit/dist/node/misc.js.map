{"version":3,"sources":["../../src/node/misc.js"],"names":["withTimeout","promise","timeout","error","timeoutObject","timeoutPromise","Promise","resolve","reject","setTimeout","race","clearTimeout","err","noop","debugLogger","process","env","DEBUG","console","log","getPlatform","platform","getArch","arch","getPlatformForGO","goplatform","GOOS","getArchForGO","GOARCH"],"mappings":";;;;;;;AAAA;;;;AAEO,MAAMA,WAAW,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,EAAyBC,KAAzB,KAAmC;AAC5D,MAAIC,aAAJ;AAEA,QAAMC,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtDJ,IAAAA,aAAa,GAAGK,UAAU,CAAC,MAAM;AAC/BD,MAAAA,MAAM,CAACL,KAAD,CAAN;AACD,KAFyB,EAEvBD,OAFuB,CAA1B;AAGD,GAJsB,CAAvB;;AAMA,MAAI;AACF,UAAMI,OAAO,CAACI,IAAR,CAAa,CAACT,OAAD,EAAUI,cAAV,CAAb,CAAN;AACA;;;;;AAIAM,IAAAA,YAAY,CAACP,aAAD,CAAZ,CANE,CAOF;;AACA,WAAOH,OAAP;AACD,GATD,CASE,OAAOW,GAAP,EAAY;AACZD,IAAAA,YAAY,CAACP,aAAD,CAAZ;AACA,UAAMQ,GAAN;AACD;AACF,CAtBM;AAwBP;;;;;;;;;AAKO,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,KAAZ,GAAoBC,OAAO,CAACC,GAA5B,GAAkC,MAAM,CAAE,CAA9D;;;AAEA,MAAMC,WAAW,GAAG,MAAML,OAAO,CAACM,QAAlC;;;;AACA,MAAMC,OAAO,GAAG,MAAMP,OAAO,CAACQ,IAA9B;;;;AACA,MAAMC,gBAAgB,GAAG,MAAMC,oBAAWC,IAA1C;;;;AACA,MAAMC,YAAY,GAAG,MAAMF,oBAAWG,MAAtC","sourcesContent":["import goplatform from 'go-platform'\n\nexport const withTimeout = async (promise, timeout, error) => {\n  let timeoutObject\n\n  const timeoutPromise = new Promise((resolve, reject) => {\n    timeoutObject = setTimeout(() => {\n      reject(error)\n    }, timeout)\n  })\n\n  try {\n    await Promise.race([promise, timeoutPromise])\n    /**\n     * If we don't use `clearTimeout` the process will stay alive\n     * until the timeout has been processed: <https://nodejs.org/api/timers.html#timers_class_timeout>\n     */\n    clearTimeout(timeoutObject)\n    // return the initial promise object\n    return promise\n  } catch (err) {\n    clearTimeout(timeoutObject)\n    throw err\n  }\n}\n\n/**\n * No operation, this function will do nothing.\n *\n * A useful utility to assign as a default value for callbacks.\n */\nexport const noop = () => {}\nexport const debugLogger = process.env.DEBUG ? console.log : () => {}\n\nexport const getPlatform = () => process.platform\nexport const getArch = () => process.arch\nexport const getPlatformForGO = () => goplatform.GOOS\nexport const getArchForGO = () => goplatform.GOARCH\n"],"file":"misc.js"}