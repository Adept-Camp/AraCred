{"version":3,"sources":["../../src/acl/viewFormatter.js"],"names":["flattenAclPermissions","permissions","aclPermissions","to","roles","Object","entries","roleHash","data","push","role","allowedEntities","manager","formatAclPermission","aclPermission","apps","knownApps","knownRoles","toAddress","managerAddress","getAppInfo","address","app","find","proxyAddress","name","appId","knownRole","roleId","id","map","hash","formatAclPermissions"],"mappings":";;;;;;;;AAAA;;AAEA;;;;;AAKO,MAAMA,qBAAqB,GAAGC,WAAW,IAAI;AAClD,QAAMC,cAAc,GAAG,EAAvB;;AACA,OAAK,MAAM,CAACC,EAAD,EAAKC,KAAL,CAAX,IAA0BC,MAAM,CAACC,OAAP,CAAeL,WAAf,CAA1B,EAAuD;AACrD,SAAK,MAAM,CAACM,QAAD,EAAWC,IAAX,CAAX,IAA+BH,MAAM,CAACC,OAAP,CAAeF,KAAf,CAA/B,EAAsD;AACpD;AACAF,MAAAA,cAAc,CAACO,IAAf,CAAoB;AAClBN,QAAAA,EADkB;AAElBO,QAAAA,IAAI,EAAEH,QAFY;AAGlBI,QAAAA,eAAe,EAAEH,IAAI,CAACG,eAHJ;AAIlBC,QAAAA,OAAO,EAAEJ,IAAI,CAACI;AAJI,OAApB;AAMD;AACF;;AACD,SAAOV,cAAP;AACD,CAdM;AAgBP;;;;;;;;;;;;AAQO,MAAMW,mBAAmB,GAAG,CACjCC,aADiC,EAEjCC,IAFiC,EAGjCC,SAHiC,EAIjCC,UAJiC,KAK9B;AACH,QAAM;AACJd,IAAAA,EAAE,EAAEe,SADA;AAEJR,IAAAA,IAAI,EAAEH,QAFF;AAGJI,IAAAA,eAHI;AAIJC,IAAAA,OAAO,EAAEO;AAJL,MAKFL,aALJ;AAOA;;;;;;;AAMA,QAAMM,UAAU,GAAGC,OAAO,IAAI;AAC5B,UAAMC,GAAG,GAAGP,IAAI,CAACQ,IAAL,CAAU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsBH,OAAO,KAAKG,YAA5C,CAAZ;AACA,WAAO;AACLH,MAAAA,OADK;AAELI,MAAAA,IAAI,EAAEH,GAAG,GAAGN,SAAS,CAACM,GAAG,CAACI,KAAL,CAAT,IAAwB,EAA3B,GAAgC;AAFpC,KAAP;AAID,GAND;;AAQA,QAAMC,SAAS,GAAGV,UAAU,CAACV,QAAD,CAA5B;AACA,QAAMqB,MAAM,GAAGD,SAAS,GAAGA,SAAS,CAACE,EAAV,IAAgB,EAAnB,GAAwB,EAAhD;AAEA,SAAO;AACL1B,IAAAA,EAAE,EAAEiB,UAAU,CAACF,SAAD,CADT;AAELN,IAAAA,OAAO,EAAEQ,UAAU,CAACD,cAAD,CAFd;AAGLR,IAAAA,eAAe,EAAEA,eAAe,CAACmB,GAAhB,CAAoBV,UAApB,CAHZ;AAILV,IAAAA,IAAI,EAAE;AACJqB,MAAAA,IAAI,EAAExB,QADF;AAEJsB,MAAAA,EAAE,EAAED;AAFA;AAJD,GAAP;AASD,CAvCM;AAyCP;;;;;;;;;;;;AAQO,SAASI,oBAAT,CAA8B/B,WAA9B,EAA2Cc,IAA3C,EAAiDC,SAAjD,EAA4DC,UAA5D,EAAwE;AAC7E,SAAOjB,qBAAqB,CAACC,WAAD,CAArB,CAAmC6B,GAAnC,CAAuChB,aAAa,IACzDD,mBAAmB,CAACC,aAAD,EAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,UAAjC,CADd,CAAP;AAGD","sourcesContent":["import '../../@types/acl/typedef'\n\n/**\n * Flattens all ACL permissions from an acl object into a single array\n * @param {AclPermissions} permissions Permissions\n * @return {AclPermission[]} acl permissions data\n */\nexport const flattenAclPermissions = permissions => {\n  const aclPermissions = []\n  for (const [to, roles] of Object.entries(permissions)) {\n    for (const [roleHash, data] of Object.entries(roles)) {\n      // Verbose assignment for data transparency\n      aclPermissions.push({\n        to,\n        role: roleHash,\n        allowedEntities: data.allowedEntities,\n        manager: data.manager,\n      })\n    }\n  }\n  return aclPermissions\n}\n\n/**\n * Formats one acl permission data attaching human readable names to its raw data\n * @param {AclPermission} aclPermission ACL permission data\n * @param {App[]} apps Apps\n * @param {KnownApps} knownApps Known apps\n * @param {KnownRoles} knownRoles Known roles\n * @return {AclPermissionFormatted} with human readable names if any\n */\nexport const formatAclPermission = (\n  aclPermission,\n  apps,\n  knownApps,\n  knownRoles\n) => {\n  const {\n    to: toAddress,\n    role: roleHash,\n    allowedEntities,\n    manager: managerAddress,\n  } = aclPermission\n\n  /**\n   * Shortcut to TRY get an app name from it's proxy address\n   * If the app can't be found, returns an empty string: ''\n   * @param  {string} address Proxy address of a possible app\n   * @return {AclPermissionAppInfo} app info\n   */\n  const getAppInfo = address => {\n    const app = apps.find(({ proxyAddress }) => address === proxyAddress)\n    return {\n      address,\n      name: app ? knownApps[app.appId] || '' : '',\n    }\n  }\n\n  const knownRole = knownRoles[roleHash]\n  const roleId = knownRole ? knownRole.id || '' : ''\n\n  return {\n    to: getAppInfo(toAddress),\n    manager: getAppInfo(managerAddress),\n    allowedEntities: allowedEntities.map(getAppInfo),\n    role: {\n      hash: roleHash,\n      id: roleId,\n    },\n  }\n}\n\n/**\n * Formats acl permissions attaching human readable names to its raw data\n * @param  {AclPermissions} permissions Permissions\n * @param  {App[]} apps Apps\n * @param  {KnownApps} knownApps Known apps\n * @param  {KnownRoles} knownRoles Known roles\n * @return {AclPermissionFormatted[]} Formated acl permissions data\n */\nexport function formatAclPermissions(permissions, apps, knownApps, knownRoles) {\n  return flattenAclPermissions(permissions).map(aclPermission =>\n    formatAclPermission(aclPermission, apps, knownApps, knownRoles)\n  )\n}\n"],"file":"viewFormatter.js"}