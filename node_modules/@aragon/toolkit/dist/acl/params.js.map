{"version":3,"sources":["../../src/acl/params.js"],"names":["Op","NONE","EQ","NEQ","GT","LT","GTE","LTE","RET","NOT","AND","OR","XOR","IF_ELSE","ArgumentIds","BLOCK_NUMBER_PARAM_ID","TIMESTAMP_PARAM_ID","ORACLE_PARAM_ID","LOGIC_OP_PARAM_ID","PARAM_VALUE_PARAM_ID","convertStringToParam","str","cleanStr","replace","m","p1","idStr","opStr","valueStr","exec","id","toUpperCase","op","value","convertStringToLogicParam","err","Error","encodeParam","param","encodedParam","BN","shln","or","parseNumber","toString","params","split","length","encodeOperator","encodeIfElse","e","param1","param2","add","condition","successParam","failureParam","number","substr"],"mappings":"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","sourcesContent":["import { isString } from 'lodash'\nimport BN from 'bn.js'\n\n/**\n * @typedef {Object} AclParam ACL parameter\n * @property {string} id\n * @property {string} op\n * @property {string} value\n */\n\n/**\n * ACL operators. See https://hack.aragon.org/docs/aragonos-ref#parameter-interpretation\n * for more information.\n */\nexport const Op = {\n  NONE: '0',\n  EQ: '1',\n  NEQ: '2',\n  GT: '3',\n  LT: '4',\n  GTE: '5',\n  LTE: '6',\n  RET: '7',\n  NOT: '8',\n  AND: '9',\n  OR: '10',\n  XOR: '11',\n  IF_ELSE: '12',\n}\n\nconst ArgumentIds = {\n  BLOCK_NUMBER_PARAM_ID: '200',\n  TIMESTAMP_PARAM_ID: '201',\n  ORACLE_PARAM_ID: '203',\n  LOGIC_OP_PARAM_ID: '204',\n  PARAM_VALUE_PARAM_ID: '205',\n}\n\n/**\n * Convert a string to an AclParam object\n * The string must follow the pattern: \"<id>, <op>, <value>\"\n * Where <id> is the param id, <op> is the operation, either as a string or\n * as a number, and <value> is the value.\n * examples: \"LOGIC_OP_PARAM_ID, OR, (1,2)\", \"0, GT, 42\",\n * \"1, EQ, 0x6E14E589477AA08d139D55a871535c0579B1BB84\"\n * @name convertStringToParam\n * @param {string} str String param\n * @returns {AclParam} Param object\n */\nexport function convertStringToParam(str) {\n  try {\n    // Remove square brackets, quotes and spaces\n    const cleanStr = str\n      .replace(/^\\[(.+)\\]$/, (m, p1) => p1)\n      .replace(/ /g, '')\n      .replace(/\"/g, '')\n      .replace(/'/g, '')\n\n    const [, idStr, opStr, valueStr] = /^(.+?),(.+?),(.+)$/.exec(cleanStr)\n    const id = ArgumentIds[idStr.toUpperCase()] || idStr\n    const op = Op[opStr.toUpperCase()] || opStr\n\n    const value =\n      id === ArgumentIds.LOGIC_OP_PARAM_ID\n        ? convertStringToLogicParam(valueStr)\n        : valueStr\n\n    return { id, op, value }\n  } catch (err) {\n    throw new Error(`Can't parse param ${str}`)\n  }\n}\n\n/**\n * Encode an ACL parameter to uint256 string\n * @param {AclParam} param ACL Parameter\n * @returns {string} Encoded param\n */\nexport function encodeParam(param) {\n  const encodedParam = new BN(param.id)\n    .shln(248)\n    .or(new BN(param.op).shln(240))\n    .or(parseNumber(param.value))\n\n  return encodedParam.toString()\n}\n\n/**\n * Convert an ACL logic parameter from string\n * to an encoded bn.js uint\n * @param {string} str Param string\n * @returns {BN} Encoded parameter\n */\nfunction convertStringToLogicParam(str) {\n  try {\n    // Remove encodeIfElse, encodeOperator, quotes and spaces\n    const cleanStr = str\n      .replace(/encodeIfElse/i, '')\n      .replace(/encodeOperator/i, '')\n      .replace(/^\\((.+)\\)$/, (m, p1) => p1)\n      .replace(/^\\[(.+)\\]$/, (m, p1) => p1)\n      .replace(/ /g, '')\n      .replace(/\"/g, '')\n      .replace(/'/g, '')\n\n    const params = cleanStr.split(',')\n\n    switch (params.length) {\n      case 2:\n        return encodeOperator(params[0], params[1])\n      case 3:\n        return encodeIfElse(params[0], params[1], params[2])\n      default:\n        throw new Error('Invalid parameters.')\n    }\n  } catch (e) {\n    throw new Error(\"Can't parse logic parameters.\")\n  }\n}\n\n/**\n * Encode an operator\n * @param {string} param1 Left param\n * @param {string} param2 Right param\n * @returns {BN} Encoded operator\n */\nfunction encodeOperator(param1, param2) {\n  return new BN(param1).add(new BN(param2).shln(32))\n}\n\n/**\n * Encode an if-else condition\n * Original logic: https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/test/helpers/ACLHelper.sol\n * @param {string} condition Condition param\n * @param {string} successParam Success param\n * @param {string} failureParam Failure param\n * @returns {BN} Encoded condition\n */\nfunction encodeIfElse(condition, successParam, failureParam) {\n  return new BN(condition)\n    .add(new BN(successParam).shln(32))\n    .add(new BN(failureParam).shln(64))\n}\n\n/**\n * Parse a decimal or hexadecimal number\n * @param {string|number} number Number\n * @returns {BN} bn.js number\n */\nfunction parseNumber(number) {\n  return isString(number) && number.substr(0, 2) === '0x'\n    ? new BN(number.substr(2), 16)\n    : new BN(number)\n}\n"],"file":"params.js"}