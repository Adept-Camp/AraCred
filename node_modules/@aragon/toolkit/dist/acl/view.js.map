{"version":3,"sources":["../../src/acl/view.js"],"names":["getDaoAddressPermissionsApps","dao","web3Provider","ipfsConf","apm","Promise","resolve","reject","permissions","apps","daoAddress","resolveIfReady","ensRegistryAddress","provider","onPermissions","_permissions","onDaoAddress","addr","then","wrapper","catch","err","message"],"mappings":";;;;;;;AAAA;;AACA;;AAqBO,MAAMA,4BAA4B,GAAG,CAAC;AAC3CC,EAAAA,GAD2C;AAE3CC,EAAAA,YAF2C;AAG3CC,EAAAA,QAH2C;AAI3CC,EAAAA;AAJ2C,CAAD,KAKtC;AACJ,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;;;AAGA,QAAIC,WAAJ;AACA;;;;AAGA,QAAIC,IAAJ;AACA;;;;AAGA,QAAIC,UAAJ;;AAEA,UAAMC,cAAc,GAAG,MAAM;AAC3B,UAAIH,WAAW,IAAIC,IAAf,IAAuBC,UAA3B,EAAuC;AACrCJ,QAAAA,OAAO,CAAC;AAAEE,UAAAA,WAAF;AAAeC,UAAAA,IAAf;AAAqBC,UAAAA;AAArB,SAAD,CAAP;AACD;AACF,KAJD;;AAMA,uCAAaT,GAAb,EAAkBG,GAAG,CAACQ,kBAAtB,EAA0C;AACxCC,MAAAA,QAAQ,EAAEX,YAD8B;AAExCC,MAAAA,QAFwC;AAGxCW,MAAAA,aAAa,EAAEC,YAAY,IAAI;AAC7BP,QAAAA,WAAW,GAAGO,YAAd;AACAJ,QAAAA,cAAc;AACf,OANuC;AAOxCK,MAAAA,YAAY,EAAEC,IAAI,IAAI;AACpBP,QAAAA,UAAU,GAAGO,IAAb;AACAN,QAAAA,cAAc;AACf;AAVuC,KAA1C,EAYGO,IAZH,CAYQ,MAAMC,OAAN,IAAiB;AACrBV,MAAAA,IAAI,GAAG,MAAM,8BAAQU,OAAR,CAAb;AACAR,MAAAA,cAAc;AACf,KAfH,EAgBGS,KAhBH,CAgBSC,GAAG,IAAI;AACZA,MAAAA,GAAG,CAACC,OAAJ,GAAe,wBAAuBD,GAAG,CAACC,OAAQ,EAAlD;AACAf,MAAAA,MAAM,CAACc,GAAD,CAAN;AACD,KAnBH;AAoBD,GAxCM,CAAP;AAyCD,CA/CM","sourcesContent":["import '../../@types/acl/typedef'\nimport { initAragonJS, getApps } from '../helpers/aragonjs-wrapper'\n\n// TODO: Stop using wrapper\n\n/**\n * @typedef {Object} ReturnData\n * @property {AclPermissions} permissions\n * @property {App[]} apps\n * @property {string} daoAddress\n */\n\n/**\n * Return a task list for viewing DAO ACL permissions\n *\n * @param  {Object} args From Listr\n * @param  {string} args.dao DAO address or ENS name\n * @param  {WebsocketProvider} args.web3Provider Web3 config\n * @param  {Object} args.ipfsConf IPFS config\n * @param  {ApmConfig} args.apm APM config\n * @return {Promise<ReturnData>} void\n */\nexport const getDaoAddressPermissionsApps = ({\n  dao,\n  web3Provider,\n  ipfsConf,\n  apm,\n}) => {\n  return new Promise((resolve, reject) => {\n    /**\n     * @type {AclPermissions}\n     */\n    let permissions\n    /**\n     * @type {App[]}\n     */\n    let apps\n    /**\n     * @type {string}\n     */\n    let daoAddress\n\n    const resolveIfReady = () => {\n      if (permissions && apps && daoAddress) {\n        resolve({ permissions, apps, daoAddress })\n      }\n    }\n\n    initAragonJS(dao, apm.ensRegistryAddress, {\n      provider: web3Provider,\n      ipfsConf,\n      onPermissions: _permissions => {\n        permissions = _permissions\n        resolveIfReady()\n      },\n      onDaoAddress: addr => {\n        daoAddress = addr\n        resolveIfReady()\n      },\n    })\n      .then(async wrapper => {\n        apps = await getApps(wrapper)\n        resolveIfReady()\n      })\n      .catch(err => {\n        err.message = `Error inspecting DAO ${err.message}`\n        reject(err)\n      })\n  })\n}\n"],"file":"view.js"}