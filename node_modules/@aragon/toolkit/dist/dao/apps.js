"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInstalledApps = getInstalledApps;
exports.getAllApps = getAllApps;
exports.getDaoAddress = getDaoAddress;

var _Kernel = require("@aragon/abis/os/artifacts/Kernel");

var _aragonjsWrapper = require("../helpers/aragonjs-wrapper");

async function getInstalledApps(dao, options) {
  const wrapper = await (0, _aragonjsWrapper.initAragonJS)(dao, options.registryAddress, {
    ipfsConf: options.ipfs,
    provider: options.provider
  });
  return (0, _aragonjsWrapper.getApps)(wrapper);
}
/**
 * Return all apps in a DAO, including permissionless ones
 *
 * @param {string} DAO address
 * @param {Object} options Options
 * @param {Object} options.web3 Web3
 * @param {Object[]} options.userApps User apps
 */


async function getAllApps(dao, options) {
  const {
    web3
  } = options;
  const kernel = new web3.eth.Contract(_Kernel.abi, dao);
  const events = await kernel.getPastEvents('NewAppProxy', {
    fromBlock: await kernel.methods.getInitializationBlock().call(),
    toBlock: 'latest'
  });
  return events.map(event => ({
    proxyAddress: event.returnValues.proxy,
    appId: event.returnValues.appId
  }));
}
/**
 * Return a DAO address from its subdomain
 *
 * @param {string} dao DAO subdomain
 * @param {Object} options Options
 * @param {Object} options.provider ETH provider
 * @param {string} options.registryAddress ENS registry address
 */


async function getDaoAddress(dao, options) {
  return /[a-z0-9]+\.eth/.test(dao) ? (0, _aragonjsWrapper.resolveEnsDomain)(dao, options) : dao;
}
//# sourceMappingURL=apps.js.map