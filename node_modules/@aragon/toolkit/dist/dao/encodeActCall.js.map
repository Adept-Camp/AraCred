{"version":3,"sources":["../../src/dao/encodeActCall.js"],"names":["signature","params","sigBytes","abi","encodeFunctionSignature","types","replace","split","paramBytes","encodeParameters","slice"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;eAKe,CAACA,SAAD,EAAYC,MAAM,GAAG,EAArB,KAA4B;AACzC,QAAMC,QAAQ,GAAGC,oBAAIC,uBAAJ,CAA4BJ,SAA5B,CAAjB;;AAEA,QAAMK,KAAK,GAAGL,SAAS,CAACM,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAd,CAHyC,CAKzC;;AACA,MAAIF,KAAK,KAAK,EAAd,EAAkB;AAChB,WAAOH,QAAP;AACD;;AAED,QAAMM,UAAU,GAAGL,oBAAIM,gBAAJ,CAAqBJ,KAAK,CAACE,KAAN,CAAY,GAAZ,CAArB,EAAuCN,MAAvC,CAAnB;;AAEA,SAAQ,GAAEC,QAAS,GAAEM,UAAU,CAACE,KAAX,CAAiB,CAAjB,CAAoB,EAAzC;AACD,C","sourcesContent":["import abi from 'web3-eth-abi'\n\n/**\n * Encode ACT function call\n * @param {string} signature Function signature\n * @param {any[]} params\n */\nexport default (signature, params = []) => {\n  const sigBytes = abi.encodeFunctionSignature(signature)\n\n  const types = signature.replace(')', '').split('(')[1]\n\n  // No params, return signature directly\n  if (types === '') {\n    return sigBytes\n  }\n\n  const paramBytes = abi.encodeParameters(types.split(','), params)\n\n  return `${sigBytes}${paramBytes.slice(2)}`\n}\n"],"file":"encodeActCall.js"}