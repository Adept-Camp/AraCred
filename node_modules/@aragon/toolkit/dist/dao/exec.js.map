{"version":3,"sources":["../../src/dao/exec.js"],"names":["dao","app","method","params","apm","web3","wsProvider","gasPrice","progressHandler","wrapper","ensRegistryAddress","ipfsConf","ipfs","provider","currentProvider","accounts","eth","getAccounts","transactionPath","Error","receipt","sendTransaction"],"mappings":";;;;;;;AAAA;;AAiBe,wBAAe;AAC5BA,EAAAA,GAD4B;AAE5BC,EAAAA,GAF4B;AAG5BC,EAAAA,MAH4B;AAI5BC,EAAAA,MAJ4B;AAK5BC,EAAAA,GAL4B;AAM5BC,EAAAA,IAN4B;AAO5BC,EAAAA,UAP4B;AAQ5BC,EAAAA,QAR4B;AAS5BC,EAAAA,eAAe,GAAG,MAAM,CAAE;AATE,CAAf,EAUZ;AACD,QAAMC,OAAO,GAAG,MAAM,mCAAaT,GAAb,EAAkBI,GAAG,CAACM,kBAAtB,EAA0C;AAC9DC,IAAAA,QAAQ,EAAEP,GAAG,CAACQ,IADgD;AAE9DL,IAAAA,QAF8D;AAG9DM,IAAAA,QAAQ,EAAEP,UAAU,IAAID,IAAI,CAACS,eAHiC;AAI9DC,IAAAA,QAAQ,EAAE,MAAMV,IAAI,CAACW,GAAL,CAASC,WAAT;AAJ8C,GAA1C,CAAtB;AAOAT,EAAAA,eAAe,CAAC,CAAD,CAAf;AAEA,QAAMU,eAAe,GAAG,CACtB,MAAM,yCAAmBjB,GAAnB,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCM,OAAxC,CADgB,EAEtB,CAFsB,CAAxB;AAIA,MAAI,CAACS,eAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AAEFX,EAAAA,eAAe,CAAC,CAAD,CAAf;AAEA,SAAO;AACLU,IAAAA,eADK;AAELE,IAAAA,OAAO,EAAE,MAAMf,IAAI,CAACW,GAAL,CAASK,eAAT,CAAyBH,eAAzB;AAFV,GAAP;AAID","sourcesContent":["import { initAragonJS, getTransactionPath } from '../helpers/aragonjs-wrapper'\n\n/**\n * Execute a method on a DAO's app.\n *\n * @param {Object} params Parameters\n * @param {string} params.dao DAO name or address\n * @param {string} params.app App address\n * @param {string} params.method Method name\n * @param {Array<*>} params.params Method parameters\n * @param {Object} params.apm APM config\n * @param {Object} params.web3 Web3 instance\n * @param {Object} params.wsProvider Ethereum provider\n * @param {string} params.gasPrice Gas price\n * @param {function} params.progressHandler Progress handler\n * @returns {Promise<{ transactionPath, receipt }>} Transaction path and receipt\n */\nexport default async function({\n  dao,\n  app,\n  method,\n  params,\n  apm,\n  web3,\n  wsProvider,\n  gasPrice,\n  progressHandler = () => {},\n}) {\n  const wrapper = await initAragonJS(dao, apm.ensRegistryAddress, {\n    ipfsConf: apm.ipfs,\n    gasPrice,\n    provider: wsProvider || web3.currentProvider,\n    accounts: await web3.eth.getAccounts(),\n  })\n\n  progressHandler(1)\n\n  const transactionPath = (\n    await getTransactionPath(app, method, params, wrapper)\n  )[0]\n\n  if (!transactionPath)\n    throw new Error('Cannot find transaction path for executing action')\n\n  progressHandler(2)\n\n  return {\n    transactionPath,\n    receipt: await web3.eth.sendTransaction(transactionPath),\n  }\n}\n"],"file":"exec.js"}