{"version":3,"sources":["../../src/dao/apps.js"],"names":["getInstalledApps","dao","options","wrapper","registryAddress","ipfsConf","ipfs","provider","getAllApps","web3","kernel","eth","Contract","kernelAbi","events","getPastEvents","fromBlock","methods","getInitializationBlock","call","toBlock","map","event","proxyAddress","returnValues","proxy","appId","getDaoAddress","test"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAgBO,eAAeA,gBAAf,CAAgCC,GAAhC,EAAqCC,OAArC,EAA8C;AACnD,QAAMC,OAAO,GAAG,MAAM,mCAAaF,GAAb,EAAkBC,OAAO,CAACE,eAA1B,EAA2C;AAC/DC,IAAAA,QAAQ,EAAEH,OAAO,CAACI,IAD6C;AAE/DC,IAAAA,QAAQ,EAAEL,OAAO,CAACK;AAF6C,GAA3C,CAAtB;AAKA,SAAO,8BAAQJ,OAAR,CAAP;AACD;AAED;;;;;;;;;;AAQO,eAAeK,UAAf,CAA0BP,GAA1B,EAA+BC,OAA/B,EAAwC;AAC7C,QAAM;AAAEO,IAAAA;AAAF,MAAWP,OAAjB;AACA,QAAMQ,MAAM,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBC,WAAtB,EAAiCZ,GAAjC,CAAf;AAEA,QAAMa,MAAM,GAAG,MAAMJ,MAAM,CAACK,aAAP,CAAqB,aAArB,EAAoC;AACvDC,IAAAA,SAAS,EAAE,MAAMN,MAAM,CAACO,OAAP,CAAeC,sBAAf,GAAwCC,IAAxC,EADsC;AAEvDC,IAAAA,OAAO,EAAE;AAF8C,GAApC,CAArB;AAKA,SAAON,MAAM,CAACO,GAAP,CAAWC,KAAK,KAAK;AAC1BC,IAAAA,YAAY,EAAED,KAAK,CAACE,YAAN,CAAmBC,KADP;AAE1BC,IAAAA,KAAK,EAAEJ,KAAK,CAACE,YAAN,CAAmBE;AAFA,GAAL,CAAhB,CAAP;AAID;AAED;;;;;;;;;;AAQO,eAAeC,aAAf,CAA6B1B,GAA7B,EAAkCC,OAAlC,EAA2C;AAChD,SAAO,iBAAiB0B,IAAjB,CAAsB3B,GAAtB,IAA6B,uCAAiBA,GAAjB,EAAsBC,OAAtB,CAA7B,GAA8DD,GAArE;AACD","sourcesContent":["import { abi as kernelAbi } from '@aragon/abis/os/artifacts/Kernel'\n//\nimport {\n  initAragonJS,\n  getApps,\n  resolveEnsDomain,\n} from '../helpers/aragonjs-wrapper'\n\n/**\n * Return installed apps for a DAO\n *\n * @param {string} dao DAO address\n * @param {Object} options Options\n * @param {Object} options.provider ETH provider\n * @param {string} options.registryAddress ENS registry address\n * @param {Object} options.ipfs IPFS configuration\n * @param {Object[]} options.userApps User apps\n */\nexport async function getInstalledApps(dao, options) {\n  const wrapper = await initAragonJS(dao, options.registryAddress, {\n    ipfsConf: options.ipfs,\n    provider: options.provider,\n  })\n\n  return getApps(wrapper)\n}\n\n/**\n * Return all apps in a DAO, including permissionless ones\n *\n * @param {string} DAO address\n * @param {Object} options Options\n * @param {Object} options.web3 Web3\n * @param {Object[]} options.userApps User apps\n */\nexport async function getAllApps(dao, options) {\n  const { web3 } = options\n  const kernel = new web3.eth.Contract(kernelAbi, dao)\n\n  const events = await kernel.getPastEvents('NewAppProxy', {\n    fromBlock: await kernel.methods.getInitializationBlock().call(),\n    toBlock: 'latest',\n  })\n\n  return events.map(event => ({\n    proxyAddress: event.returnValues.proxy,\n    appId: event.returnValues.appId,\n  }))\n}\n\n/**\n * Return a DAO address from its subdomain\n *\n * @param {string} dao DAO subdomain\n * @param {Object} options Options\n * @param {Object} options.provider ETH provider\n * @param {string} options.registryAddress ENS registry address\n */\nexport async function getDaoAddress(dao, options) {\n  return /[a-z0-9]+\\.eth/.test(dao) ? resolveEnsDomain(dao, options) : dao\n}\n"],"file":"apps.js"}