{"version":3,"sources":["../../src/dao/assign-id.js"],"names":["assignId","daoAddress","daoId","options","web3","ensRegistry","gasPrice","Error","ens","ENS","currentProvider","registrar","eth","Contract","ififsResolvingRegistrarAbi","owner","ARAGON_DOMAIN","methods","register","send","from","getAccounts","gas","REGISTRAR_GAS_LIMIT","isIdAssigned","daoUrl","Boolean","resolver","addr","err","NameNotFound"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;AAaO,eAAeA,QAAf,CAAwBC,UAAxB,EAAoCC,KAApC,EAA2CC,OAA3C,EAAoD;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA;AAArB,MAAkCH,OAAxC;AAEA,MAAI,CAAC,0BAAUF,UAAV,CAAL,EAA4B,MAAM,IAAIM,KAAJ,CAAW,oBAAmBN,UAAW,EAAzC,CAAN;AAC5B,QAAMO,GAAG,GAAG,IAAIC,oBAAJ,CAAQL,IAAI,CAACM,eAAb,EAA8BL,WAA9B,CAAZ;AAEA,QAAMM,SAAS,GAAG,IAAIP,IAAI,CAACQ,GAAL,CAASC,QAAb,CAChBC,4BADgB,GAEhB,MAAMN,GAAG,CAACO,KAAJ,CAAUC,wBAAV,CAFU,EAAlB;AAKA,QAAML,SAAS,CAACM,OAAV,CAAkBC,QAAlB,CAA2B,qBAAKhB,KAAL,CAA3B,EAAwCD,UAAxC,EAAoDkB,IAApD,CAAyD;AAC7DC,IAAAA,IAAI,EAAE,CAAC,MAAMhB,IAAI,CAACQ,GAAL,CAASS,WAAT,EAAP,EAA+B,CAA/B,CADuD;AAE7DC,IAAAA,GAAG,EAAEC,8BAFwD;AAG7DjB,IAAAA;AAH6D,GAAzD,CAAN;AAKD;AAED;;;;;;;;;;;AASO,eAAekB,YAAf,CAA4BtB,KAA5B,EAAmCC,OAAnC,EAA4C;AACjD,QAAMsB,MAAM,GAAG,mCAAwBvB,KAAxB,CAAf;AACA,QAAMM,GAAG,GAAG,IAAIC,oBAAJ,CAAQN,OAAO,CAACC,IAAR,CAAaM,eAArB,EAAsCP,OAAO,CAACE,WAA9C,CAAZ,CAFiD,CAIjD;AACA;;AACA,MAAI;AACF,WAAOqB,OAAO,EAAC,MAAMlB,GAAG,CAACmB,QAAJ,CAAaF,MAAb,EAAqBG,IAArB,EAAP,EAAd;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,QAAIA,GAAG,KAAKpB,qBAAIqB,YAAhB,EAA8B,MAAMD,GAAN;AAC9B,WAAO,KAAP;AACD;AACF","sourcesContent":["import ENS from 'ethereum-ens'\nimport { sha3, isAddress } from 'web3-utils'\nimport { abi as ififsResolvingRegistrarAbi } from '@aragon/abis/id/artifacts/IFIFSResolvingRegistrar'\n//\nimport { REGISTRAR_GAS_LIMIT, ARAGON_DOMAIN } from '../helpers/constants'\nimport { convertDAOIdToSubdomain } from '../util'\n\n/**\n * Assign an id to an existing DAO address.\n *\n * @param {string} daoAddress DAO proxy address\n * @param {string} daoId Id to assign\n * @param {Object} options Options\n * @param {Object} options.web3 Web3\n * @param {string} options.ensRegistry ENS registry address\n * @param {string} options.gasPrice Gas price\n * @returns {void}\n */\nexport async function assignId(daoAddress, daoId, options) {\n  const { web3, ensRegistry, gasPrice } = options\n\n  if (!isAddress(daoAddress)) throw new Error(`Invalid address: ${daoAddress}`)\n  const ens = new ENS(web3.currentProvider, ensRegistry)\n\n  const registrar = new web3.eth.Contract(\n    ififsResolvingRegistrarAbi,\n    await ens.owner(ARAGON_DOMAIN)\n  )\n\n  await registrar.methods.register(sha3(daoId), daoAddress).send({\n    from: (await web3.eth.getAccounts())[0],\n    gas: REGISTRAR_GAS_LIMIT,\n    gasPrice,\n  })\n}\n\n/**\n * Return true if `id` is assigned to an organization\n *\n * @param {string} daoId Aragon DAO id\n * @param {Object} options Options\n * @param {Object} options.web3 web3\n * @param {string} options.ensRegistry ENS registry address\n * @returns {Promise<boolean>} true if already assigned\n */\nexport async function isIdAssigned(daoId, options) {\n  const daoUrl = convertDAOIdToSubdomain(daoId)\n  const ens = new ENS(options.web3.currentProvider, options.ensRegistry)\n\n  // The only way to know if a domain is not registered is to call\n  // `resolver().addr()` and check if it throws\n  try {\n    return Boolean(await ens.resolver(daoUrl).addr())\n  } catch (err) {\n    // throws an ENS.NameNotFound error if name doesn't exist\n    if (err !== ENS.NameNotFound) throw err\n    return false\n  }\n}\n"],"file":"assign-id.js"}