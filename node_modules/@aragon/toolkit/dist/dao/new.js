"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _bareTemplateAbi = _interopRequireDefault(require("./utils/bare-template-abi"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function _default({
  repo,
  web3,
  templateInstance,
  newInstanceMethod,
  newInstanceArgs,
  deployEvent,
  gasPrice
}) {
  let template;

  if (!templateInstance) {
    // If not connected to IPFS, repo won't have an ABI
    const repoAbi = repo.abi || _bareTemplateAbi.default;
    template = new web3.eth.Contract(repoAbi, repo.contractAddress);
  } else {
    template = templateInstance;
  }

  const method = newInstanceMethod || 'newInstance';

  if (!template.methods[method]) {
    throw new Error(`Template abi does not contain the requested function: ${method}(...). This may be due to the template's abi not being retrieved from IPFS. Is IPFS running?`);
  }

  const newInstanceTx = template.methods[newInstanceMethod || 'newInstance'](...newInstanceArgs);
  const estimatedGas = await newInstanceTx.estimateGas();
  const {
    events
  } = await newInstanceTx.send({
    from: (await web3.eth.getAccounts())[0],
    gas: await (0, _util.getRecommendedGasLimit)(web3, estimatedGas),
    gasPrice
  });
  if (!events[deployEvent]) throw new Error(`Could not find deploy event: ${deployEvent}`);
  return events[deployEvent].returnValues.dao;
}
//# sourceMappingURL=new.js.map