{"version":3,"sources":["../../src/dao/new.js"],"names":["repo","web3","templateInstance","newInstanceMethod","newInstanceArgs","deployEvent","gasPrice","template","repoAbi","abi","bareTemplateAbi","eth","Contract","contractAddress","method","methods","Error","newInstanceTx","estimatedGas","estimateGas","events","send","from","getAccounts","gas","returnValues","dao"],"mappings":";;;;;;;AAAA;;AACA;;;;AAae,wBAAe;AAC5BA,EAAAA,IAD4B;AAE5BC,EAAAA,IAF4B;AAG5BC,EAAAA,gBAH4B;AAI5BC,EAAAA,iBAJ4B;AAK5BC,EAAAA,eAL4B;AAM5BC,EAAAA,WAN4B;AAO5BC,EAAAA;AAP4B,CAAf,EAQZ;AACD,MAAIC,QAAJ;;AAEA,MAAI,CAACL,gBAAL,EAAuB;AACrB;AACA,UAAMM,OAAO,GAAGR,IAAI,CAACS,GAAL,IAAYC,wBAA5B;AACAH,IAAAA,QAAQ,GAAG,IAAIN,IAAI,CAACU,GAAL,CAASC,QAAb,CAAsBJ,OAAtB,EAA+BR,IAAI,CAACa,eAApC,CAAX;AACD,GAJD,MAIO;AACLN,IAAAA,QAAQ,GAAGL,gBAAX;AACD;;AAED,QAAMY,MAAM,GAAGX,iBAAiB,IAAI,aAApC;;AAEA,MAAI,CAACI,QAAQ,CAACQ,OAAT,CAAiBD,MAAjB,CAAL,EAA+B;AAC7B,UAAM,IAAIE,KAAJ,CACH,yDAAwDF,MAAO,8FAD5D,CAAN;AAGD;;AAED,QAAMG,aAAa,GAAGV,QAAQ,CAACQ,OAAT,CAAiBZ,iBAAiB,IAAI,aAAtC,EACpB,GAAGC,eADiB,CAAtB;AAGA,QAAMc,YAAY,GAAG,MAAMD,aAAa,CAACE,WAAd,EAA3B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAa,MAAMH,aAAa,CAACI,IAAd,CAAmB;AAC1CC,IAAAA,IAAI,EAAE,CAAC,MAAMrB,IAAI,CAACU,GAAL,CAASY,WAAT,EAAP,EAA+B,CAA/B,CADoC;AAE1CC,IAAAA,GAAG,EAAE,MAAM,kCAAuBvB,IAAvB,EAA6BiB,YAA7B,CAF+B;AAG1CZ,IAAAA;AAH0C,GAAnB,CAAzB;AAMA,MAAI,CAACc,MAAM,CAACf,WAAD,CAAX,EACE,MAAM,IAAIW,KAAJ,CAAW,gCAA+BX,WAAY,EAAtD,CAAN;AAEF,SAAOe,MAAM,CAACf,WAAD,CAAN,CAAoBoB,YAApB,CAAiCC,GAAxC;AACD","sourcesContent":["import bareTemplateAbi from './utils/bare-template-abi'\nimport { getRecommendedGasLimit } from '../util'\n\n/**\n * Create a new DAO\n *\n * @param {Object} parmas Parameters\n * @param {Object} repo Template repository\n * @param {Object} web3 web3\n * @param {Object} templateInstance Template instance\n * @param {string} newInstanceMethod New instance method name\n * @param {string[]} newInstanceArgs New instance arguments\n * @param {string} gasPrice Gas price\n */\nexport default async function({\n  repo,\n  web3,\n  templateInstance,\n  newInstanceMethod,\n  newInstanceArgs,\n  deployEvent,\n  gasPrice,\n}) {\n  let template\n\n  if (!templateInstance) {\n    // If not connected to IPFS, repo won't have an ABI\n    const repoAbi = repo.abi || bareTemplateAbi\n    template = new web3.eth.Contract(repoAbi, repo.contractAddress)\n  } else {\n    template = templateInstance\n  }\n\n  const method = newInstanceMethod || 'newInstance'\n\n  if (!template.methods[method]) {\n    throw new Error(\n      `Template abi does not contain the requested function: ${method}(...). This may be due to the template's abi not being retrieved from IPFS. Is IPFS running?`\n    )\n  }\n\n  const newInstanceTx = template.methods[newInstanceMethod || 'newInstance'](\n    ...newInstanceArgs\n  )\n  const estimatedGas = await newInstanceTx.estimateGas()\n  const { events } = await newInstanceTx.send({\n    from: (await web3.eth.getAccounts())[0],\n    gas: await getRecommendedGasLimit(web3, estimatedGas),\n    gasPrice,\n  })\n\n  if (!events[deployEvent])\n    throw new Error(`Could not find deploy event: ${deployEvent}`)\n\n  return events[deployEvent].returnValues.dao\n}\n"],"file":"new.js"}