{"version":3,"sources":["../../src/apm/apmPublishVersion.js"],"names":["web3","manager","appId","version","provider","directory","contract","from","apmOptions","apm","publishVersion"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;eAmBe,OACbA,IADa,EAEbC,OAFa,EAGbC,KAHa,EAIbC,OAJa,EAKbC,QALa,EAMbC,SANa,EAObC,QAPa,EAQbC,IARa,EASbC,UATa,KAUV;AACH,QAAMC,GAAG,GAAG,MAAM,kBAAST,IAAT,EAAeQ,UAAf,CAAlB;AAEA,SAAOC,GAAG,CAACC,cAAJ,CACLT,OADK,EAELC,KAFK,EAGLC,OAHK,EAILC,QAJK,EAKLC,SALK,EAMLC,QANK,EAOLC,IAPK,CAAP;AASD,C","sourcesContent":["import aragonPM from '@aragon/apm'\n\n/**\n * Publishes a new version (`version`) of `appId` using storage provider `provider`.\n *\n * If the destination repository does not exist, it falls back to creating a new\n * repository with an initial version controlled by an initial manager.\n *\n * Returns the raw transaction to sign.\n *\n * @param {Object} web3 web3\n * @param {string} manager The address that will manage the new repo if it has to be created.\n * @param {string} appId The ENS name for the application repository.\n * @param {string} version A valid semantic version for this version.\n * @param {string} provider The name of an APM storage provider.\n * @param {string} directory The directory that contains files to publish.\n * @param {string} contract The new contract address for this version.\n * @param {string} from The account address we should estimate the gas with\n * @param {Object} apmOptions APM options\n * @return {Promise} A promise that resolves to a raw transaction\n */\nexport default async (\n  web3,\n  manager,\n  appId,\n  version,\n  provider,\n  directory,\n  contract,\n  from,\n  apmOptions\n) => {\n  const apm = await aragonPM(web3, apmOptions)\n\n  return apm.publishVersion(\n    manager,\n    appId,\n    version,\n    provider,\n    directory,\n    contract,\n    from\n  )\n}\n"],"file":"apmPublishVersion.js"}