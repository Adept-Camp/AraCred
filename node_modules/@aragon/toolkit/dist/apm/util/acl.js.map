{"version":3,"sources":["../../../src/apm/util/acl.js"],"names":["web3","getACL","repoAddr","repo","eth","Contract","aragonAppAbi","daoAddr","methods","kernel","call","dao","kernelAbi","aclAddr","acl","aclAbi","getRoleId","repoAbi","CREATE_VERSION_ROLE","grant","grantee","roleId","grantPermission","estimatedGas","estimateGas","to","options","address","data","encodeABI","gas"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;eAEeA,IAAI,IAAI;AACrB,QAAMC,MAAM,GAAG,MAAMC,QAAN,IAAkB;AAC/B,UAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,GAAL,CAASC,QAAb,CAAsBC,cAAtB,EAAoCJ,QAApC,CAAb;AACA,UAAMK,OAAO,GAAG,MAAMJ,IAAI,CAACK,OAAL,CAAaC,MAAb,GAAsBC,IAAtB,EAAtB;AACA,UAAMC,GAAG,GAAG,IAAIX,IAAI,CAACI,GAAL,CAASC,QAAb,CAAsBO,WAAtB,EAAiCL,OAAjC,CAAZ;AACA,UAAMM,OAAO,GAAG,MAAMF,GAAG,CAACH,OAAJ,CAAYM,GAAZ,GAAkBJ,IAAlB,EAAtB;AAEA,WAAO,IAAIV,IAAI,CAACI,GAAL,CAASC,QAAb,CAAsBU,QAAtB,EAA8BF,OAA9B,CAAP;AACD,GAPD;;AASA,QAAMG,SAAS,GAAG,MAAMd,QAAN,IAAkB;AAClC,UAAMC,IAAI,GAAG,IAAIH,IAAI,CAACI,GAAL,CAASC,QAAb,CAAsBY,SAAtB,EAA+Bf,QAA/B,CAAb;AACA,WAAOC,IAAI,CAACK,OAAL,CAAaU,mBAAb,GAAmCR,IAAnC,EAAP;AACD,GAHD;;AAKA,SAAO;AACLS,IAAAA,KAAK,EAAE,OAAOjB,QAAP,EAAiBkB,OAAjB,KAA6B;AAClC,YAAMN,GAAG,GAAG,MAAMb,MAAM,CAACC,QAAD,CAAxB;AAEA,YAAMmB,MAAM,GAAG,MAAML,SAAS,CAACd,QAAD,CAA9B;AAEA,YAAMQ,IAAI,GAAGI,GAAG,CAACN,OAAJ,CAAYc,eAAZ,CAA4BF,OAA5B,EAAqClB,QAArC,EAA+CmB,MAA/C,CAAb;AACA,YAAME,YAAY,GAAGb,IAAI,CAACc,WAAL,EAArB;AAEA,aAAO;AACLC,QAAAA,EAAE,EAAEX,GAAG,CAACY,OAAJ,CAAYC,OADX;AAELC,QAAAA,IAAI,EAAElB,IAAI,CAACmB,SAAL,EAFD;AAGLC,QAAAA,GAAG,EAAE,MAAM,kCAAuB9B,IAAvB,EAA6BuB,YAA7B;AAHN,OAAP;AAKD;AAdI,GAAP;AAgBD,C","sourcesContent":["import { abi as aclAbi } from '@aragon/abis/os/artifacts/ACL'\nimport { abi as aragonAppAbi } from '@aragon/abis/os/artifacts/AragonApp'\nimport { abi as kernelAbi } from '@aragon/abis/os/artifacts/Kernel'\nimport { abi as repoAbi } from '@aragon/abis/os/artifacts/Repo'\n//\nimport { getRecommendedGasLimit } from '../../util'\n\nexport default web3 => {\n  const getACL = async repoAddr => {\n    const repo = new web3.eth.Contract(aragonAppAbi, repoAddr)\n    const daoAddr = await repo.methods.kernel().call()\n    const dao = new web3.eth.Contract(kernelAbi, daoAddr)\n    const aclAddr = await dao.methods.acl().call()\n\n    return new web3.eth.Contract(aclAbi, aclAddr)\n  }\n\n  const getRoleId = async repoAddr => {\n    const repo = new web3.eth.Contract(repoAbi, repoAddr)\n    return repo.methods.CREATE_VERSION_ROLE().call()\n  }\n\n  return {\n    grant: async (repoAddr, grantee) => {\n      const acl = await getACL(repoAddr)\n\n      const roleId = await getRoleId(repoAddr)\n\n      const call = acl.methods.grantPermission(grantee, repoAddr, roleId)\n      const estimatedGas = call.estimateGas()\n\n      return {\n        to: acl.options.address,\n        data: call.encodeABI(),\n        gas: await getRecommendedGasLimit(web3, estimatedGas),\n      }\n    },\n  }\n}\n"],"file":"acl.js"}