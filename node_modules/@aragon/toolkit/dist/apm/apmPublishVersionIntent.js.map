{"version":3,"sources":["../../src/apm/apmPublishVersionIntent.js"],"names":["web3","manager","appId","version","provider","directory","contract","apmOptions","apm","publishVersionIntent"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;eAkBe,OACbA,IADa,EAEbC,OAFa,EAGbC,KAHa,EAIbC,OAJa,EAKbC,QALa,EAMbC,SANa,EAObC,QAPa,EAQbC,UARa,KASV;AACH,QAAMC,GAAG,GAAG,MAAM,kBAASR,IAAT,EAAeO,UAAf,CAAlB;AAEA,SAAOC,GAAG,CAACC,oBAAJ,CACLR,OADK,EAELC,KAFK,EAGLC,OAHK,EAILC,QAJK,EAKLC,SALK,EAMLC,QANK,CAAP;AAQD,C","sourcesContent":["import aragonPM from '@aragon/apm'\n\n/**\n * Create an intent to publish a new version (`version`) of `appId` using storage provider `provider`.\n *\n * If the destination repository does not exist, the intent will be for creating a new\n * repository with an initial version.\n *\n * Returns an object with the needed components to execute an aragon.js intent\n *\n * @param {Object} web3 web3\n * @param {string} manager The address that will manage the new repo if it has to be created.\n * @param {string} appId The ENS name for the application repository.\n * @param {string} version A valid semantic version for this version.\n * @param {string} provider The name of an APM storage provider.\n * @param {string} directory The directory that contains files to publish.\n * @param {string} contract The new contract address for this version.\n * @param {Object} apmOptions APM options\n * @return {Promise} A promise that resolves to an aragon.js intent\n */\nexport default async (\n  web3,\n  manager,\n  appId,\n  version,\n  provider,\n  directory,\n  contract,\n  apmOptions\n) => {\n  const apm = await aragonPM(web3, apmOptions)\n\n  return apm.publishVersionIntent(\n    manager,\n    appId,\n    version,\n    provider,\n    directory,\n    contract\n  )\n}\n"],"file":"apmPublishVersionIntent.js"}