{"version":3,"sources":["../../src/kernel/kernel.js"],"names":["newAppProxyLogName","newAppProxyLogAbi","kernelAbi","find","type","name","Error","getAclAddress","dao","web3","daoInstance","eth","Contract","methods","acl","call","getAppProxyAddressFromReceipt","receipt","logTopic","web3EthAbi","encodeEventSignature","deployLog","logs","topics","address","log","decodeLog","inputs","data","proxy","getBasesNamespace","kernel","APP_BASES_NAMESPACE","getAppBase","appId","basesNamespace","getApp"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;;;AAEA,MAAMA,kBAAkB,GAAG,aAA3B;;AACA,MAAMC,iBAAiB,GAAGC,YAAUC,IAAV,CACxB,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAoBD,IAAI,KAAK,OAAT,IAAoBC,IAAI,KAAKL,kBADzB,CAA1B,C,CAGA;AACA;;;AACA,IAAI,CAACC,iBAAL,EAAwB;AACtB,QAAM,IAAIK,KAAJ,CAAW;4CACyBN,kBAAmB,GADvD,CAAN;AAED;AAED;;;;;;;;;AAOO,eAAeO,aAAf,CAA6BC,GAA7B,EAAkCC,IAAlC,EAAwC;AAC7C,QAAMC,WAAW,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBV,WAAtB,EAAiCM,GAAjC,CAApB;AACA,SAAOE,WAAW,CAACG,OAAZ,CAAoBC,GAApB,GAA0BC,IAA1B,EAAP;AACD;AAED;;;;;;;;;AAOO,SAASC,6BAAT,CAAuCR,GAAvC,EAA4CS,OAA5C,EAAqD;AAC1D,QAAMC,QAAQ,GAAGC,oBAAWC,oBAAX,CAAgCnB,iBAAhC,CAAjB;;AAEA,QAAMoB,SAAS,GAAGJ,OAAO,CAACK,IAAR,CAAanB,IAAb,CAAkB,CAAC;AAAEoB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,KAAyB;AAC3D,WAAOD,MAAM,CAAC,CAAD,CAAN,KAAcL,QAAd,IAA0B,0BAAeV,GAAf,EAAoBgB,OAApB,CAAjC;AACD,GAFiB,CAAlB;AAIA,MAAI,CAACH,SAAL,EAAgB;;AAEhB,QAAMI,GAAG,GAAGN,oBAAWO,SAAX,CAAqBzB,iBAAiB,CAAC0B,MAAvC,EAA+CN,SAAS,CAACO,IAAzD,CAAZ;;AACA,MAAI,CAACH,GAAG,CAACI,KAAT,EACE,MAAM,IAAIvB,KAAJ,CAAW;iBACJN,kBAAmB,wCAD1B,CAAN;AAEF,SAAOyB,GAAG,CAACI,KAAX;AACD;AAED;;;;;;;;;;AAQO,eAAeC,iBAAf,CAAiCtB,GAAjC,EAAsCC,IAAtC,EAA4C;AACjD,QAAMsB,MAAM,GAAG,IAAItB,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBV,WAAtB,EAAiCM,GAAjC,CAAf;AACA,SAAOuB,MAAM,CAAClB,OAAP,CAAemB,mBAAf,GAAqCjB,IAArC,EAAP;AACD;AAED;;;;;;;;;;AAQO,eAAekB,UAAf,CAA0BzB,GAA1B,EAA+B0B,KAA/B,EAAsCzB,IAAtC,EAA4C;AACjD,QAAMsB,MAAM,GAAG,IAAItB,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBV,WAAtB,EAAiCM,GAAjC,CAAf;AACA,QAAM2B,cAAc,GAAG,MAAML,iBAAiB,CAACtB,GAAD,EAAMC,IAAN,CAA9C;AACA,SAAOsB,MAAM,CAAClB,OAAP,CAAeuB,MAAf,CAAsBD,cAAtB,EAAsCD,KAAtC,EAA6CnB,IAA7C,EAAP;AACD","sourcesContent":["import web3EthAbi from 'web3-eth-abi'\nimport { abi as kernelAbi } from '@aragon/abis/os/artifacts/Kernel'\n//\nimport { addressesEqual } from '../util'\n\nconst newAppProxyLogName = 'NewAppProxy'\nconst newAppProxyLogAbi = kernelAbi.find(\n  ({ type, name }) => type === 'event' && name === newAppProxyLogName\n)\n// This check is run outside the function body so it can be catched\n// on every any run when it happens, instead on a specific function call\nif (!newAppProxyLogAbi) {\n  throw new Error(`aragonCLI is out of sync with aragon/os, please report this issue:\nKernel ABI does not include expected log '${newAppProxyLogName}'`)\n}\n\n/**\n * Returns aclAddress for a DAO\n *\n * @param {string} dao DAO address\n * @param {Object} web3 Web3 initialized object\n * @return {Promise<string>} aclAddress\n */\nexport async function getAclAddress(dao, web3) {\n  const daoInstance = new web3.eth.Contract(kernelAbi, dao)\n  return daoInstance.methods.acl().call()\n}\n\n/**\n * Returns new app proxy contract address\n *\n * @param {string} dao DAO address\n * @param {Object} receipt Web3 receipt object\n * @return {string|undefined} app proxy contract address\n */\nexport function getAppProxyAddressFromReceipt(dao, receipt) {\n  const logTopic = web3EthAbi.encodeEventSignature(newAppProxyLogAbi)\n\n  const deployLog = receipt.logs.find(({ topics, address }) => {\n    return topics[0] === logTopic && addressesEqual(dao, address)\n  })\n\n  if (!deployLog) return\n\n  const log = web3EthAbi.decodeLog(newAppProxyLogAbi.inputs, deployLog.data)\n  if (!log.proxy)\n    throw new Error(`aragonCLI is out of sync with aragon/os, please report this issue:\nKernel ABI log ${newAppProxyLogName} does not have expected argument 'log'`)\n  return log.proxy\n}\n\n/**\n * Returns the current app base address for an appId\n *\n * @param {string} dao DAO address\n * @param {string} appId APP id to get the base of\n * @param {Object} web3 Web3 initialized object\n * @return {Promise<string>} basesNamespace\n */\nexport async function getBasesNamespace(dao, web3) {\n  const kernel = new web3.eth.Contract(kernelAbi, dao)\n  return kernel.methods.APP_BASES_NAMESPACE().call()\n}\n\n/**\n * Returns the current app base address for an appId\n *\n * @param {string} dao DAO address\n * @param {string} appId APP id to get the base of\n * @param {Object} web3 Web3 initialized object\n * @return {Promise<string>} currentBaseAddress\n */\nexport async function getAppBase(dao, appId, web3) {\n  const kernel = new web3.eth.Contract(kernelAbi, dao)\n  const basesNamespace = await getBasesNamespace(dao, web3)\n  return kernel.methods.getApp(basesNamespace, appId).call()\n}\n"],"file":"kernel.js"}